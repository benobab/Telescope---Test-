)]}'
{"version":3,"sources":["meteor://ðŸ’»app/packages/aldeed_http/packages/aldeed_http.js"],"names":[],"mappingsgG","file":"/packages/aldeed_http.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n// packages/aldeed:http/http-extras-common.js                                      //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n                                                                                   //\nmakeErrorByStatus = function(statusCode, content) {                                // 1\n  var MAX_LENGTH = 500; // if you change this, also change the appropriate test    // 2\n                                                                                   // 3\n  var truncate = function(str, length) {                                           // 4\n    return str.length > length ? str.slice(0, length) + '...' : str;               // 5\n  };                                                                               // 6\n                                                                                   // 7\n  var message = \"failed [\" + statusCode + \"]\";                                     // 8\n  if (content) {                                                                   // 9\n    try {                                                                          // 10\n      message += \" \" + truncate(content.replace(/\\n/g, \" \"), MAX_LENGTH);          // 11\n    }                                                                              // 12\n    catch (error) {                                                                // 13\n      message += \" Response is not of type String \";                               // 14\n    }                                                                              // 15\n  }                                                                                // 16\n                                                                                   // 17\n  return new Error(message);                                                       // 18\n};                                                                                 // 19\n                                                                                   // 20\nencodeParams = function(params) {                                                  // 21\n  var buf = [];                                                                    // 22\n  _.each(params, function(value, key) {                                            // 23\n    if (buf.length)                                                                // 24\n      buf.push('&');                                                               // 25\n    buf.push(encodeString(key), '=', encodeString(value));                         // 26\n  });                                                                              // 27\n  return buf.join('').replace(/%20/g, '+');                                        // 28\n};                                                                                 // 29\n                                                                                   // 30\nencodeString = function(str) {                                                     // 31\n  return encodeURIComponent(str).replace(/[!'()]/g, escape).replace(/\\*/g, \"%2A\"); // 32\n};                                                                                 // 33\n                                                                                   // 34\nbuildUrl = function(before_qmark, from_qmark, opt_query, opt_params) {             // 35\n  var url_without_query = before_qmark;                                            // 36\n  var query = from_qmark ? from_qmark.slice(1) : null;                             // 37\n                                                                                   // 38\n  if (typeof opt_query === \"string\")                                               // 39\n    query = String(opt_query);                                                     // 40\n                                                                                   // 41\n  if (opt_params) {                                                                // 42\n    query = query || \"\";                                                           // 43\n    var prms = encodeParams(opt_params);                                           // 44\n    if (query && prms)                                                             // 45\n      query += '&';                                                                // 46\n    query += prms;                                                                 // 47\n  }                                                                                // 48\n                                                                                   // 49\n  var url = url_without_query;                                                     // 50\n  if (query !== null)                                                              // 51\n    url += (\"?\"+query);                                                            // 52\n                                                                                   // 53\n  return url;                                                                      // 54\n};                                                                                 // 55\n                                                                                   // 56\n// Fill in `response.data` if the content-type is JSON.                            // 57\npopulateData = function(response) {                                                // 58\n  // Read Content-Type header, up to a ';' if there is one.                        // 59\n  // A typical header might be \"application/json; charset=utf-8\"                   // 60\n  // or just \"application/json\".                                                   // 61\n  var contentType = (response.headers['content-type'] || ';').split(';')[0];       // 62\n                                                                                   // 63\n  // Only try to parse data as JSON if server sets correct content type.           // 64\n  if (_.include(['application/json', 'text/javascript'], contentType)) {           // 65\n    try {                                                                          // 66\n      response.data = JSON.parse(response.content);                                // 67\n    } catch (err) {                                                                // 68\n      response.data = null;                                                        // 69\n    }                                                                              // 70\n  } else {                                                                         // 71\n    response.data = null;                                                          // 72\n  }                                                                                // 73\n};                                                                                 // 74\n                                                                                   // 75\n/////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n// packages/aldeed:http/http-extras-client.js                                      //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n                                                                                   //\nHTTP.call = function(method, url, options, callback) {                             // 1\n                                                                                   // 2\n  ////////// Process arguments //////////                                          // 3\n                                                                                   // 4\n  if (! callback && typeof options === \"function\") {                               // 5\n    // support (method, url, callback) argument list                               // 6\n    callback = options;                                                            // 7\n    options = null;                                                                // 8\n  }                                                                                // 9\n                                                                                   // 10\n  options = options || {};                                                         // 11\n                                                                                   // 12\n  if (typeof callback !== \"function\")                                              // 13\n    throw new Error(                                                               // 14\n      \"Can't make a blocking HTTP call from the client; callback required.\");      // 15\n                                                                                   // 16\n  method = (method || \"\").toUpperCase();                                           // 17\n                                                                                   // 18\n  var headers = {};                                                                // 19\n                                                                                   // 20\n  var content = options.content;                                                   // 21\n  if (options.data) {                                                              // 22\n    content = JSON.stringify(options.data);                                        // 23\n    headers['Content-Type'] = 'application/json';                                  // 24\n  }                                                                                // 25\n                                                                                   // 26\n  var params_for_url, params_for_body;                                             // 27\n  if (content || method === \"GET\" || method === \"HEAD\")                            // 28\n    params_for_url = options.params;                                               // 29\n  else                                                                             // 30\n    params_for_body = options.params;                                              // 31\n                                                                                   // 32\n  var query_match = /^(.*?)(\\?.*)?$/.exec(url);                                    // 33\n  url = buildUrl(query_match[1], query_match[2],                                   // 34\n                 options.query, params_for_url);                                   // 35\n                                                                                   // 36\n  if (options.followRedirects === false)                                           // 37\n    throw new Error(\"Option followRedirects:false not supported on client.\");      // 38\n                                                                                   // 39\n  var username, password;                                                          // 40\n  if (options.auth) {                                                              // 41\n    var colonLoc = options.auth.indexOf(':');                                      // 42\n    if (colonLoc < 0)                                                              // 43\n      throw new Error('auth option should be of the form \"username:password\"');    // 44\n    username = options.auth.substring(0, colonLoc);                                // 45\n    password = options.auth.substring(colonLoc+1);                                 // 46\n  }                                                                                // 47\n                                                                                   // 48\n  if (params_for_body) {                                                           // 49\n    content = encodeParams(params_for_body);                                       // 50\n  }                                                                                // 51\n                                                                                   // 52\n  _.extend(headers, options.headers || {});                                        // 53\n                                                                                   // 54\n  ////////// Callback wrapping //////////                                          // 55\n                                                                                   // 56\n  // wrap callback to add a 'response' property on an error, in case               // 57\n  // we have both (http 4xx/5xx error, which has a response payload)               // 58\n  callback = (function(callback) {                                                 // 59\n    return function(error, response) {                                             // 60\n      if (error && response)                                                       // 61\n        error.response = response;                                                 // 62\n      callback(error, response);                                                   // 63\n    };                                                                             // 64\n  })(callback);                                                                    // 65\n                                                                                   // 66\n  // safety belt: only call the callback once.                                     // 67\n  callback = _.once(callback);                                                     // 68\n                                                                                   // 69\n                                                                                   // 70\n  ////////// Kickoff! //////////                                                   // 71\n                                                                                   // 72\n  // from this point on, errors are because of something remote, not               // 73\n  // something we should check in advance. Turn exceptions into error              // 74\n  // results.                                                                      // 75\n  try {                                                                            // 76\n    // setup XHR object                                                            // 77\n    var xhr;                                                                       // 78\n    if (typeof XMLHttpRequest !== \"undefined\")                                     // 79\n      xhr = new XMLHttpRequest();                                                  // 80\n    else if (typeof ActiveXObject !== \"undefined\")                                 // 81\n      xhr = new ActiveXObject(\"Microsoft.XMLHttp\"); // IE6                         // 82\n    else                                                                           // 83\n      throw new Error(\"Can't create XMLHttpRequest\"); // ???                       // 84\n                                                                                   // 85\n    xhr.open(method, url, true, username, password);                               // 86\n                                                                                   // 87\n    // support custom \"ejson-binary\" response type                                 // 88\n    // and all browser-supported types                                             // 89\n    var convertToBinary;                                                           // 90\n    if (options.responseType === \"ejson-binary\") {                                 // 91\n      xhr.responseType = \"arraybuffer\";                                            // 92\n      convertToBinary = true;                                                      // 93\n    } else {                                                                       // 94\n      xhr.responseType = options.responseType;                                     // 95\n    }                                                                              // 96\n                                                                                   // 97\n    for (var k in headers)                                                         // 98\n      xhr.setRequestHeader(k, headers[k]);                                         // 99\n                                                                                   // 100\n                                                                                   // 101\n    // setup timeout                                                               // 102\n    var timed_out = false;                                                         // 103\n    var timer;                                                                     // 104\n    if (options.timeout) {                                                         // 105\n      timer = Meteor.setTimeout(function() {                                       // 106\n        timed_out = true;                                                          // 107\n        xhr.abort();                                                               // 108\n      }, options.timeout);                                                         // 109\n    };                                                                             // 110\n                                                                                   // 111\n    // callback on complete                                                        // 112\n    xhr.onreadystatechange = function(evt) {                                       // 113\n      if (xhr.readyState === 4) { // COMPLETE                                      // 114\n        if (timer)                                                                 // 115\n          Meteor.clearTimeout(timer);                                              // 116\n                                                                                   // 117\n        if (timed_out) {                                                           // 118\n          callback(new Error(\"timeout\"));                                          // 119\n        } else if (! xhr.status) {                                                 // 120\n          // no HTTP response                                                      // 121\n          callback(new Error(\"network\"));                                          // 122\n        } else {                                                                   // 123\n                                                                                   // 124\n          var response = {};                                                       // 125\n          response.statusCode = xhr.status;                                        // 126\n                                                                                   // 127\n          var body = xhr.response || xhr.responseText;                             // 128\n                                                                                   // 129\n          // Some browsers don't yet support \"json\" responseType,                  // 130\n          // but we can replicate it                                               // 131\n          if (options.responseType === \"json\" && typeof body === \"string\") {       // 132\n            try {                                                                  // 133\n              body = JSON.parse(body);                                             // 134\n            } catch (err) {                                                        // 135\n              body = null;                                                         // 136\n            }                                                                      // 137\n          }                                                                        // 138\n                                                                                   // 139\n          // Add support for a custom responseType: \"ejson-binary\"                 // 140\n          if (convertToBinary && typeof ArrayBuffer !== \"undefined\" && typeof Uint8Array !== \"undefined\" && body instanceof ArrayBuffer) {\n            var view = new Uint8Array(body);                                       // 142\n            var len = body.byteLength;                                             // 143\n            var binaryBody = EJSON.newBinary(len);                                 // 144\n            for (var i = 0; i < len; i++) {                                        // 145\n              binaryBody[i] = view[i];                                             // 146\n            }                                                                      // 147\n            body = binaryBody;                                                     // 148\n          }                                                                        // 149\n                                                                                   // 150\n          response.content = body;                                                 // 151\n                                                                                   // 152\n          response.headers = {};                                                   // 153\n          var header_str = xhr.getAllResponseHeaders();                            // 154\n                                                                                   // 155\n          // https://github.com/meteor/meteor/issues/553                           // 156\n          //                                                                       // 157\n          // In Firefox there is a weird issue, sometimes                          // 158\n          // getAllResponseHeaders returns the empty string, but                   // 159\n          // getResponseHeader returns correct results. Possibly this              // 160\n          // issue:                                                                // 161\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=608735                   // 162\n          //                                                                       // 163\n          // If this happens we can't get a full list of headers, but              // 164\n          // at least get content-type so our JSON decoding happens                // 165\n          // correctly. In theory, we could try and rescue more header             // 166\n          // values with a list of common headers, but content-type is             // 167\n          // the only vital one for now.                                           // 168\n          if (\"\" === header_str && xhr.getResponseHeader(\"content-type\"))          // 169\n            header_str =                                                           // 170\n            \"content-type: \" + xhr.getResponseHeader(\"content-type\");              // 171\n                                                                                   // 172\n          var headers_raw = header_str.split(/\\r?\\n/);                             // 173\n          _.each(headers_raw, function (h) {                                       // 174\n            var m = /^(.*?):(?:\\s+)(.*)$/.exec(h);                                 // 175\n            if (m && m.length === 3)                                               // 176\n              response.headers[m[1].toLowerCase()] = m[2];                         // 177\n          });                                                                      // 178\n                                                                                   // 179\n          populateData(response);                                                  // 180\n                                                                                   // 181\n          var error = null;                                                        // 182\n          if (response.statusCode >= 400)                                          // 183\n            error = makeErrorByStatus(response.statusCode, response.content);      // 184\n                                                                                   // 185\n          callback(error, response);                                               // 186\n        }                                                                          // 187\n      }                                                                            // 188\n    };                                                                             // 189\n                                                                                   // 190\n    // send it on its way                                                          // 191\n    xhr.send(content);                                                             // 192\n                                                                                   // 193\n  } catch (err) {                                                                  // 194\n    callback(err);                                                                 // 195\n  }                                                                                // 196\n                                                                                   // 197\n};                                                                                 // 198\n                                                                                   // 199\n/////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}