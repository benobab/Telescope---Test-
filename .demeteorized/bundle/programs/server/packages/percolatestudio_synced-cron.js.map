{"version":3,"sources":["meteor://ðŸ’»app/packages/percolatestudio_synced-cron/packages/percolatestudio_synced-cron.js"],"names":[],"mappingskG","file":"/packages/percolatestudio_synced-cron.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// packages/percolatestudio:synced-cron/synced-cron-server.js                        //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\n// A package for running jobs synchronized across multiple processes                 // 1\nSyncedCron = {                                                                       // 2\n  _entries: {},                                                                      // 3\n  running: false,                                                                    // 4\n  options: {                                                                         // 5\n    //Log job run details to console                                                 // 6\n    log: true,                                                                       // 7\n                                                                                     // 8\n    //Name of collection to use for synchronisation and logging                      // 9\n    collectionName: 'cronHistory',                                                   // 10\n                                                                                     // 11\n    //Default to using localTime                                                     // 12\n    utc: false,                                                                      // 13\n                                                                                     // 14\n    //TTL in seconds for history records in collection to expire                     // 15\n    //NOTE: Unset to remove expiry but ensure you remove the index from              // 16\n    //mongo by hand                                                                  // 17\n    collectionTTL: 172800                                                            // 18\n  }                                                                                  // 19\n}                                                                                    // 20\n                                                                                     // 21\nLater = Npm.require('later');                                                        // 22\n                                                                                     // 23\nMeteor.startup(function() {                                                          // 24\n  var options = SyncedCron.options;                                                  // 25\n                                                                                     // 26\n  // Don't allow TTL less than 5 minutes so we don't break synchronization           // 27\n  var minTTL = 300;                                                                  // 28\n                                                                                     // 29\n  // Use UTC or localtime for evaluating schedules                                   // 30\n  if (options.utc)                                                                   // 31\n    Later.date.UTC();                                                                // 32\n  else                                                                               // 33\n    Later.date.localTime();                                                          // 34\n                                                                                     // 35\n  // collection holding the job history records                                      // 36\n  SyncedCron._collection = new Mongo.Collection(options.collectionName);             // 37\n  SyncedCron._collection._ensureIndex({intendedAt: 1, name: 1}, {unique: true});     // 38\n                                                                                     // 39\n  if (options.collectionTTL) {                                                       // 40\n    if (options.collectionTTL > minTTL)                                              // 41\n      SyncedCron._collection._ensureIndex({startedAt: 1 },                           // 42\n        { expireAfterSeconds: options.collectionTTL } );                             // 43\n    else                                                                             // 44\n      console.log('Warning: Not going to use a TTL that is shorter than:' + minTTL); // 45\n  }                                                                                  // 46\n});                                                                                  // 47\n                                                                                     // 48\nvar log = {                                                                          // 49\n  info: function(message) {                                                          // 50\n    if (SyncedCron.options.log)                                                      // 51\n      Log.info({message: message});                                                  // 52\n  }                                                                                  // 53\n}                                                                                    // 54\n                                                                                     // 55\nvar scheduleEntry = function(entry) {                                                // 56\n  var schedule = entry.schedule(Later.parse);                                        // 57\n  entry._timer =                                                                     // 58\n    SyncedCron._laterSetInterval(SyncedCron._entryWrapper(entry), schedule);         // 59\n                                                                                     // 60\n  log.info('SyncedCron: scheduled \"' + entry.name + '\" next run @'                   // 61\n    + Later.schedule(schedule).next(1));                                             // 62\n}                                                                                    // 63\n                                                                                     // 64\n// add a scheduled job                                                               // 65\n// SyncedCron.add({                                                                  // 66\n//   name: String, //*required* unique name of the job                               // 67\n//   schedule: function(laterParser) {},//*required* when to run the job             // 68\n//   job: function() {}, //*required* the code to run                                // 69\n// });                                                                               // 70\nSyncedCron.add = function(entry) {                                                   // 71\n  check(entry.name, String);                                                         // 72\n  check(entry.schedule, Function);                                                   // 73\n  check(entry.job, Function);                                                        // 74\n                                                                                     // 75\n  // check                                                                           // 76\n  this._entries[entry.name] = entry;                                                 // 77\n                                                                                     // 78\n  // If cron is already running, start directly.                                     // 79\n  if (this.running) {                                                                // 80\n    scheduleEntry(entry);                                                            // 81\n  }                                                                                  // 82\n}                                                                                    // 83\n                                                                                     // 84\n// Start processing added jobs                                                       // 85\nSyncedCron.start = function() {                                                      // 86\n  var self = this;                                                                   // 87\n                                                                                     // 88\n  Meteor.startup(function() {                                                        // 89\n    // Schedule each job with later.js                                               // 90\n    _.each(self._entries, function(entry) {                                          // 91\n      scheduleEntry(entry);                                                          // 92\n    });                                                                              // 93\n    self.running = true;                                                             // 94\n  });                                                                                // 95\n}                                                                                    // 96\n                                                                                     // 97\n// Return the next scheduled date of the first matching entry or undefined           // 98\nSyncedCron.nextScheduledAtDate = function(jobName) {                                 // 99\n  var entry = this._entries[jobName];                                                // 100\n                                                                                     // 101\n  if (entry)                                                                         // 102\n    return Later.schedule(entry.schedule(Later.parse)).next(1);                      // 103\n}                                                                                    // 104\n                                                                                     // 105\n// Remove and stop the entry referenced by jobName                                   // 106\nSyncedCron.remove = function(jobName) {                                              // 107\n  var entry = this._entries[jobName];                                                // 108\n                                                                                     // 109\n  if (entry) {                                                                       // 110\n    if (entry._timer)                                                                // 111\n      entry._timer.clear();                                                          // 112\n                                                                                     // 113\n    delete this._entries[jobName];                                                   // 114\n    log.info('SyncedCron: Removed \"' + entry.name);                                  // 115\n  }                                                                                  // 116\n}                                                                                    // 117\n                                                                                     // 118\n// Stop processing and remove ALL jobs                                               // 119\nSyncedCron.stop = function() {                                                       // 120\n  _.each(this._entries, function(entry, name) {                                      // 121\n    SyncedCron.remove(name);                                                         // 122\n  });                                                                                // 123\n  this.running = false;                                                              // 124\n}                                                                                    // 125\n                                                                                     // 126\n// The meat of our logic. Checks if the specified has already run. If not,           // 127\n// records that it's running the job, runs it, and records the output                // 128\nSyncedCron._entryWrapper = function(entry) {                                         // 129\n  var self = this;                                                                   // 130\n                                                                                     // 131\n  return function(intendedAt) {                                                      // 132\n    var jobHistory = {                                                               // 133\n      intendedAt: intendedAt,                                                        // 134\n      name: entry.name,                                                              // 135\n      startedAt: new Date()                                                          // 136\n    };                                                                               // 137\n                                                                                     // 138\n    // If we have a dup key error, another instance has already tried to run         // 139\n    // this job.                                                                     // 140\n    try {                                                                            // 141\n      jobHistory._id = self._collection.insert(jobHistory);                          // 142\n    } catch(e) {                                                                     // 143\n      // http://www.mongodb.org/about/contributors/error-codes/                      // 144\n      // 11000 == duplicate key error                                                // 145\n      if (e.name === 'MongoError' && e.code === 11000) {                             // 146\n        log.info('SyncedCron: Not running \"' + entry.name + '\" again.');             // 147\n        return;                                                                      // 148\n      }                                                                              // 149\n                                                                                     // 150\n      throw e;                                                                       // 151\n    };                                                                               // 152\n                                                                                     // 153\n    // run and record the job                                                        // 154\n    try {                                                                            // 155\n      log.info('SyncedCron: Starting \"' + entry.name + '\".');                        // 156\n      var output = entry.job(intendedAt); // <- Run the actual job                   // 157\n                                                                                     // 158\n      log.info('SyncedCron: Finished \"' + entry.name + '\".');                        // 159\n      self._collection.update({_id: jobHistory._id}, {                               // 160\n        $set: {                                                                      // 161\n          finishedAt: new Date(),                                                    // 162\n          result: output                                                             // 163\n        }                                                                            // 164\n      });                                                                            // 165\n    } catch(e) {                                                                     // 166\n      log.info('SyncedCron: Exception \"' + entry.name +'\" ' + e.stack);              // 167\n      self._collection.update({_id: jobHistory._id}, {                               // 168\n        $set: {                                                                      // 169\n          finishedAt: new Date(),                                                    // 170\n          error: e.stack                                                             // 171\n        }                                                                            // 172\n      });                                                                            // 173\n    }                                                                                // 174\n  };                                                                                 // 175\n}                                                                                    // 176\n                                                                                     // 177\n// for tests                                                                         // 178\nSyncedCron._reset = function() {                                                     // 179\n  this._entries = {};                                                                // 180\n  this._collection.remove({});                                                       // 181\n  this.running = false;                                                              // 182\n}                                                                                    // 183\n                                                                                     // 184\n// ---------------------------------------------------------------------------       // 185\n// The following two functions are lifted from the later.js package, however         // 186\n// I've made the following changes:                                                  // 187\n// - Use Meteor.setTimeout and Meteor.clearTimeout                                   // 188\n// - Added an 'intendedAt' parameter to the callback fn that specifies the precise   // 189\n//   time the callback function *should* be run (so we can co-ordinate jobs)         // 190\n//   between multiple, potentially laggy and unsynced machines                       // 191\n                                                                                     // 192\n// From: https://github.com/bunkat/later/blob/master/src/core/setinterval.js         // 193\nSyncedCron._laterSetInterval = function(fn, sched) {                                 // 194\n                                                                                     // 195\n  var t = SyncedCron._laterSetTimeout(scheduleTimeout, sched),                       // 196\n      done = false;                                                                  // 197\n                                                                                     // 198\n  /**                                                                                // 199\n  * Executes the specified function and then sets the timeout for the next           // 200\n  * interval.                                                                        // 201\n  */                                                                                 // 202\n  function scheduleTimeout(intendedAt) {                                             // 203\n    if(!done) {                                                                      // 204\n      fn(intendedAt);                                                                // 205\n      t = SyncedCron._laterSetTimeout(scheduleTimeout, sched);                       // 206\n    }                                                                                // 207\n  }                                                                                  // 208\n                                                                                     // 209\n  return {                                                                           // 210\n                                                                                     // 211\n    /**                                                                              // 212\n    * Clears the timeout.                                                            // 213\n    */                                                                               // 214\n    clear: function() {                                                              // 215\n      done = true;                                                                   // 216\n      t.clear();                                                                     // 217\n    }                                                                                // 218\n                                                                                     // 219\n  };                                                                                 // 220\n                                                                                     // 221\n};                                                                                   // 222\n                                                                                     // 223\n// From: https://github.com/bunkat/later/blob/master/src/core/settimeout.js          // 224\nSyncedCron._laterSetTimeout = function(fn, sched) {                                  // 225\n                                                                                     // 226\n  var s = Later.schedule(sched), t;                                                  // 227\n  scheduleTimeout();                                                                 // 228\n                                                                                     // 229\n  /**                                                                                // 230\n  * Schedules the timeout to occur. If the next occurrence is greater than the       // 231\n  * max supported delay (2147483647 ms) than we delay for that amount before         // 232\n  * attempting to schedule the timeout again.                                        // 233\n  */                                                                                 // 234\n  function scheduleTimeout() {                                                       // 235\n    var now = Date.now(),                                                            // 236\n        next = s.next(2, now),                                                       // 237\n        diff = next[0].getTime() - now,                                              // 238\n        intendedAt = next[0];                                                        // 239\n                                                                                     // 240\n    // minimum time to fire is one second, use next occurrence instead               // 241\n    if(diff < 1000) {                                                                // 242\n      diff = next[1].getTime() - now;                                                // 243\n      intendedAt = next[1];                                                          // 244\n    }                                                                                // 245\n                                                                                     // 246\n    if(diff < 2147483647) {                                                          // 247\n      t = Meteor.setTimeout(function() { fn(intendedAt); }, diff);                   // 248\n    }                                                                                // 249\n    else {                                                                           // 250\n      t = Meteor.setTimeout(scheduleTimeout, 2147483647);                            // 251\n    }                                                                                // 252\n  }                                                                                  // 253\n                                                                                     // 254\n  return {                                                                           // 255\n                                                                                     // 256\n    /**                                                                              // 257\n    * Clears the timeout.                                                            // 258\n    */                                                                               // 259\n    clear: function() {                                                              // 260\n      Meteor.clearTimeout(t);                                                        // 261\n    }                                                                                // 262\n                                                                                     // 263\n  };                                                                                 // 264\n                                                                                     // 265\n};                                                                                   // 266\n// ---------------------------------------------------------------------------       // 267\n                                                                                     // 268\n///////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}