{"version":3,"sources":["meteor://ðŸ’»app/packages/meteorhacks_inject-initial/packages/meteorhacks_inject-initial.js"],"names":[],"mappingskH","file":"/packages/meteorhacks_inject-initial.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/meteorhacks:inject-initial/lib/inject-server.js                                          //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nvar escapeReplaceString = function(str) {                                                            // 1\n  /*                                                                                                 // 2\n   * When using string.replace(str, newSubStr), the dollar sign (\"$\") is                             // 3\n   * considered a special character in newSubStr, and needs to be escaped                            // 4\n   * as \"$$\".  We have to do this twice, for escaping the newSubStr in                               // 5\n   * this function, and for the resulting string which is passed back.                               // 6\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace // 7\n   */                                                                                                // 8\n   return str.replace(/\\$/g, '$$$$');                                                                // 9\n}                                                                                                    // 10\n                                                                                                     // 11\nInject = {                                                                                           // 12\n  // stores in a script type=application/ejson tag, accessed with Injected.obj('id')                 // 13\n  obj: function(id, data, res) {                                                                     // 14\n    this._checkForObjOrFunction(data,                                                                // 15\n      'Inject.obj(id, data [,res]) expects `data` to be an Object or Function');                     // 16\n                                                                                                     // 17\n    if (res) {                                                                                       // 18\n      this._resAssign(res, 'objList', id, data);                                                     // 19\n    } else {                                                                                         // 20\n      this.objList[id] = data;                                                                       // 21\n    }                                                                                                // 22\n  },                                                                                                 // 23\n  objList: {},                                                                                       // 24\n                                                                                                     // 25\n  // Inserts a META called `id`, whose `content` can be accessed with Injected.meta()                // 26\n  meta: function(id, data, res) {                                                                    // 27\n    this._checkForTextOrFunction(data,                                                               // 28\n      'Inject.meta(id, data [,res]) expects `data` to be an String or Function');                    // 29\n                                                                                                     // 30\n    if (res) {                                                                                       // 31\n      this._resAssign(res, 'metaList', id, data);                                                    // 32\n    } else {                                                                                         // 33\n      this.metaList[id] = data;                                                                      // 34\n    }                                                                                                // 35\n  },                                                                                                 // 36\n  metaList: {},                                                                                      // 37\n                                                                                                     // 38\n  rawHead: function(id, textOrFunc, res) {                                                           // 39\n    this._checkForTextOrFunction(textOrFunc,                                                         // 40\n      'Inject.rawHead(id, content [,res]) expects `content` to be an String or Function');           // 41\n                                                                                                     // 42\n    if (res) {                                                                                       // 43\n      this._resAssign(res, 'rawHeads', id, textOrFunc);                                              // 44\n    } else {                                                                                         // 45\n      this.rawHeads[id] = textOrFunc;                                                                // 46\n    }                                                                                                // 47\n  },                                                                                                 // 48\n  rawHeads: {},                                                                                      // 49\n                                                                                                     // 50\n  rawBody: function(id, textOrFunc, res) {                                                           // 51\n    this._checkForTextOrFunction(textOrFunc,                                                         // 52\n      'Inject.rawBody(id, content [,res]) expects `content` to be an String or Function');           // 53\n                                                                                                     // 54\n    if (res) {                                                                                       // 55\n      this._resAssign(res, 'rawBodies', id, textOrFunc);                                             // 56\n    } else {                                                                                         // 57\n      this.rawBodies[id] = textOrFunc;                                                               // 58\n    }                                                                                                // 59\n  },                                                                                                 // 60\n  rawBodies: {},                                                                                     // 61\n                                                                                                     // 62\n  // The callback receives the entire HTML page and must return a modified version                   // 63\n  rawModHtml: function(id, func) {                                                                   // 64\n    if (!_.isFunction(func)) {                                                                       // 65\n      var message = 'Inject func id \"' + id + '\" should be a function, not ' + typeof(func);         // 66\n      throw new Error(message);                                                                      // 67\n    }                                                                                                // 68\n                                                                                                     // 69\n    this.rawModHtmlFuncs[id] = func;                                                                 // 70\n  },                                                                                                 // 71\n  rawModHtmlFuncs: {},                                                                               // 72\n                                                                                                     // 73\n  _injectObjects: function(html, res) {                                                              // 74\n    var objs = _.extend({}, Inject.objList, res.Inject && res.Inject.objList);                       // 75\n    if (_.isEmpty(objs)) {                                                                           // 76\n      return html;                                                                                   // 77\n    }                                                                                                // 78\n                                                                                                     // 79\n    var obj, injectHtml = '';                                                                        // 80\n    for (id in objs) {                                                                               // 81\n      obj = _.isFunction(objs[id]) ? objs[id](res) : objs[id];                                       // 82\n      injectHtml += \"  <script id='\" + id.replace(\"'\", '&apos;')                                     // 83\n        + \"' type='application/ejson'>\" + EJSON.stringify(obj)                                       // 84\n        + \"</script>\\n\";                                                                             // 85\n    }                                                                                                // 86\n                                                                                                     // 87\n    return html.replace('<head>', '<head>\\n' + escapeReplaceString(injectHtml));                     // 88\n  },                                                                                                 // 89\n                                                                                                     // 90\n  _injectMeta: function(html, res) {                                                                 // 91\n    var metas = _.extend({}, Inject.metaList, res.Inject && res.Inject.metaList);                    // 92\n    if (_.isEmpty(metas))                                                                            // 93\n      return html;                                                                                   // 94\n                                                                                                     // 95\n    var injectHtml = '';                                                                             // 96\n    for (id in metas) {                                                                              // 97\n      var meta = this._evalToText(metas[id], res, html);                                             // 98\n      injectHtml += \"  <meta id='\" + id.replace(\"'\", '&apos;')                                       // 99\n        + \"' content='\" + meta.replace(\"'\", '&apos;') + \"'>\\n\", res;                                 // 100\n    }                                                                                                // 101\n                                                                                                     // 102\n    return html.replace('<head>', '<head>\\n' + escapeReplaceString(injectHtml));                     // 103\n  },                                                                                                 // 104\n                                                                                                     // 105\n  _injectHeads: function(html, res) {                                                                // 106\n    var heads = _.extend({}, Inject.rawHeads, res.Inject && res.Inject.rawHeads);                    // 107\n    if (_.isEmpty(heads))                                                                            // 108\n      return html;                                                                                   // 109\n                                                                                                     // 110\n    var injectHtml = '';                                                                             // 111\n    for (id in heads) {                                                                              // 112\n      var head = this._evalToText(heads[id], res, html);                                             // 113\n      injectHtml += head + '\\n';                                                                     // 114\n    }                                                                                                // 115\n                                                                                                     // 116\n    return html.replace('<head>', '<head>\\n' + escapeReplaceString(injectHtml));                     // 117\n  },                                                                                                 // 118\n                                                                                                     // 119\n  _injectBodies: function(html, res) {                                                               // 120\n    var bodies = _.extend({}, Inject.rawBodies, res.Inject && res.Inject.rawBodies);                 // 121\n    if (_.isEmpty(bodies))                                                                           // 122\n      return html;                                                                                   // 123\n                                                                                                     // 124\n    var injectHtml = '';                                                                             // 125\n    for (id in bodies) {                                                                             // 126\n      var body = this._evalToText(bodies[id], res, html);                                            // 127\n      injectHtml += body + '\\n';                                                                     // 128\n    }                                                                                                // 129\n                                                                                                     // 130\n    return html.replace('<body>', '<body>\\n' + escapeReplaceString(injectHtml));                     // 131\n  },                                                                                                 // 132\n                                                                                                     // 133\n  // ensure object exists and store there                                                            // 134\n  _resAssign: function(res, key, id, value) {                                                        // 135\n    if (!res.Inject)                                                                                 // 136\n      res.Inject = {};                                                                               // 137\n    if (!res.Inject[key])                                                                            // 138\n      res.Inject[key] = {};                                                                          // 139\n    res.Inject[key][id] = value;                                                                     // 140\n  },                                                                                                 // 141\n                                                                                                     // 142\n  _checkForTextOrFunction: function (arg, message) {                                                 // 143\n    if(!(_.isString(arg) || _.isFunction(arg))) {                                                    // 144\n      throw new Error(message);                                                                      // 145\n    }                                                                                                // 146\n  },                                                                                                 // 147\n                                                                                                     // 148\n  _checkForObjOrFunction: function (arg, message) {                                                  // 149\n    if(!(_.isObject(arg) || _.isFunction(arg))) {                                                    // 150\n      throw new Error(message);                                                                      // 151\n    }                                                                                                // 152\n  },                                                                                                 // 153\n                                                                                                     // 154\n  // we don't handle errors here. Let them to handle in a higher level                               // 155\n  _evalToText: function(textOrFunc, res, html) {                                                     // 156\n    if(_.isFunction(textOrFunc)) {                                                                   // 157\n      return textOrFunc(res, html);                                                                  // 158\n    } else {                                                                                         // 159\n      return textOrFunc;                                                                             // 160\n    }                                                                                                // 161\n  }                                                                                                  // 162\n};                                                                                                   // 163\n                                                                                                     // 164\nInject.rawModHtml('injectHeads', Inject._injectHeads.bind(Inject));                                  // 165\nInject.rawModHtml('injectMeta', Inject._injectMeta.bind(Inject));                                    // 166\nInject.rawModHtml('injectBodies', Inject._injectBodies.bind(Inject));                                // 167\nInject.rawModHtml('injectObjects', Inject._injectObjects.bind(Inject));                              // 168\n                                                                                                     // 169\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/meteorhacks:inject-initial/lib/inject-core.js                                            //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n// Hijack core node API and attach data to the response dynamically                                  // 1\n// We are simply using this hack because, there is no way to alter                                   // 2\n// Meteor's html content on the server side                                                          // 3\n                                                                                                     // 4\nvar http = Npm.require('http');                                                                      // 5\n                                                                                                     // 6\nvar originalWrite = http.OutgoingMessage.prototype.write;                                            // 7\nhttp.OutgoingMessage.prototype.write = function(chunk, encoding) {                                   // 8\n  //prevent hijacking other http requests                                                            // 9\n  if(!this.iInjected &&                                                                              // 10\n    encoding === undefined && /^<!DOCTYPE html>/.test(chunk)) {                                      // 11\n    chunk = chunk.toString();                                                                        // 12\n                                                                                                     // 13\n    for (id in Inject.rawModHtmlFuncs) {                                                             // 14\n      chunk = Inject.rawModHtmlFuncs[id](chunk, this);                                               // 15\n      if (!_.isString(chunk)) {                                                                      // 16\n        throw new Error('Inject func id \"' + id + '\" must return HTML, not '                         // 17\n          + typeof(chunk) + '\\n' + JSON.stringify(chunk, null, 2));                                  // 18\n      }                                                                                              // 19\n    }                                                                                                // 20\n                                                                                                     // 21\n    this.iInjected = true;                                                                           // 22\n  }                                                                                                  // 23\n                                                                                                     // 24\n  originalWrite.call(this, chunk, encoding);                                                         // 25\n};                                                                                                   // 26\n                                                                                                     // 27\n//meteor algorithm to check if this is a meteor serving http request or not                          // 28\nInject.appUrl = function(url) {                                                                      // 29\n  if (url === '/favicon.ico' || url === '/robots.txt')                                               // 30\n    return false;                                                                                    // 31\n                                                                                                     // 32\n  // NOTE: app.manifest is not a web standard like favicon.ico and                                   // 33\n  // robots.txt. It is a file id we have chosen to use for HTML5                                     // 34\n  // appcache URLs. It is included here to prevent using an appcache                                 // 35\n  // then removing it from poisoning an app permanently. Eventually,                                 // 36\n  // once we have server side routing, this won't be needed as                                       // 37\n  // unknown URLs with return a 404 automatically.                                                   // 38\n  if (url === '/app.manifest')                                                                       // 39\n    return false;                                                                                    // 40\n                                                                                                     // 41\n  // Avoid serving app HTML for declared routes such as /sockjs/.                                    // 42\n  if (typeof(RoutePolicy) != 'undefined' && RoutePolicy.classify(url))                               // 43\n    return false;                                                                                    // 44\n                                                                                                     // 45\n  // we currently return app HTML on all URLs by default                                             // 46\n  return true;                                                                                       // 47\n};                                                                                                   // 48\n                                                                                                     // 49\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}