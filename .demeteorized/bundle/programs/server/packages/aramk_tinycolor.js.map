{"version":3,"sources":["meteor://ðŸ’»app/packages/aramk_tinycolor/packages/aramk_tinycolor.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H","file":"/packages/aramk_tinycolor.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/aramk:tinycolor/tinycolor.js                                                                     //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n// TinyColor v1.1.0                                                                                          // 1\n// https://github.com/bgrins/TinyColor                                                                       // 2\n// Brian Grinstead, MIT License                                                                              // 3\n                                                                                                             // 4\n(function () {                                                                                               // 5\n                                                                                                             // 6\n    // global on the server, window in the browser                                                           // 7\n    var root = this;                                                                                         // 8\n                                                                                                             // 9\n    var _tinycolor = (function() {                                                                           // 10\n                                                                                                             // 11\n////////////////////////////////////////////////////////////////////////////////                             // 12\n// BEGIN LIBRARY CODE                                                                                        // 13\n////////////////////////////////////////////////////////////////////////////////                             // 14\n                                                                                                             // 15\nvar trimLeft = /^[\\s,#]+/,                                                                                   // 16\n    trimRight = /\\s+$/,                                                                                      // 17\n    tinyCounter = 0,                                                                                         // 18\n    math = Math,                                                                                             // 19\n    mathRound = math.round,                                                                                  // 20\n    mathMin = math.min,                                                                                      // 21\n    mathMax = math.max,                                                                                      // 22\n    mathRandom = math.random;                                                                                // 23\n                                                                                                             // 24\nvar tinycolor = function tinycolor (color, opts) {                                                           // 25\n                                                                                                             // 26\n    color = (color) ? color : '';                                                                            // 27\n    opts = opts || { };                                                                                      // 28\n                                                                                                             // 29\n    // If input is already a tinycolor, return itself                                                        // 30\n    if (color instanceof tinycolor) {                                                                        // 31\n       return color;                                                                                         // 32\n    }                                                                                                        // 33\n    // If we are called as a function, call using new instead                                                // 34\n    if (!(this instanceof tinycolor)) {                                                                      // 35\n        return new tinycolor(color, opts);                                                                   // 36\n    }                                                                                                        // 37\n                                                                                                             // 38\n    var rgb = inputToRGB(color);                                                                             // 39\n    this._originalInput = color,                                                                             // 40\n    this._r = rgb.r,                                                                                         // 41\n    this._g = rgb.g,                                                                                         // 42\n    this._b = rgb.b,                                                                                         // 43\n    this._a = rgb.a,                                                                                         // 44\n    this._roundA = mathRound(100*this._a) / 100,                                                             // 45\n    this._format = opts.format || rgb.format;                                                                // 46\n    this._gradientType = opts.gradientType;                                                                  // 47\n                                                                                                             // 48\n    // Don't let the range of [0,255] come back in [0,1].                                                    // 49\n    // Potentially lose a little bit of precision here, but will fix issues where                            // 50\n    // .5 gets interpreted as half of the total, instead of half of 1                                        // 51\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`                          // 52\n    if (this._r < 1) { this._r = mathRound(this._r); }                                                       // 53\n    if (this._g < 1) { this._g = mathRound(this._g); }                                                       // 54\n    if (this._b < 1) { this._b = mathRound(this._b); }                                                       // 55\n                                                                                                             // 56\n    this._ok = rgb.ok;                                                                                       // 57\n    this._tc_id = tinyCounter++;                                                                             // 58\n};                                                                                                           // 59\n                                                                                                             // 60\ntinycolor.prototype = {                                                                                      // 61\n    isDark: function() {                                                                                     // 62\n        return this.getBrightness() < 128;                                                                   // 63\n    },                                                                                                       // 64\n    isLight: function() {                                                                                    // 65\n        return !this.isDark();                                                                               // 66\n    },                                                                                                       // 67\n    isValid: function() {                                                                                    // 68\n        return this._ok;                                                                                     // 69\n    },                                                                                                       // 70\n    getOriginalInput: function() {                                                                           // 71\n      return this._originalInput;                                                                            // 72\n    },                                                                                                       // 73\n    getFormat: function() {                                                                                  // 74\n        return this._format;                                                                                 // 75\n    },                                                                                                       // 76\n    getAlpha: function() {                                                                                   // 77\n        return this._a;                                                                                      // 78\n    },                                                                                                       // 79\n    getBrightness: function() {                                                                              // 80\n        var rgb = this.toRgb();                                                                              // 81\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;                                             // 82\n    },                                                                                                       // 83\n    setAlpha: function(value) {                                                                              // 84\n        this._a = boundAlpha(value);                                                                         // 85\n        this._roundA = mathRound(100*this._a) / 100;                                                         // 86\n        return this;                                                                                         // 87\n    },                                                                                                       // 88\n    toHsv: function() {                                                                                      // 89\n        var hsv = rgbToHsv(this._r, this._g, this._b);                                                       // 90\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };                                           // 91\n    },                                                                                                       // 92\n    toHsvString: function() {                                                                                // 93\n        var hsv = rgbToHsv(this._r, this._g, this._b);                                                       // 94\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);              // 95\n        return (this._a == 1) ?                                                                              // 96\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :                                                        // 97\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";                                    // 98\n    },                                                                                                       // 99\n    toHsl: function() {                                                                                      // 100\n        var hsl = rgbToHsl(this._r, this._g, this._b);                                                       // 101\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };                                           // 102\n    },                                                                                                       // 103\n    toHslString: function() {                                                                                // 104\n        var hsl = rgbToHsl(this._r, this._g, this._b);                                                       // 105\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);              // 106\n        return (this._a == 1) ?                                                                              // 107\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :                                                        // 108\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";                                    // 109\n    },                                                                                                       // 110\n    toHex: function(allow3Char) {                                                                            // 111\n        return rgbToHex(this._r, this._g, this._b, allow3Char);                                              // 112\n    },                                                                                                       // 113\n    toHexString: function(allow3Char) {                                                                      // 114\n        return '#' + this.toHex(allow3Char);                                                                 // 115\n    },                                                                                                       // 116\n    toHex8: function() {                                                                                     // 117\n        return rgbaToHex(this._r, this._g, this._b, this._a);                                                // 118\n    },                                                                                                       // 119\n    toHex8String: function() {                                                                               // 120\n        return '#' + this.toHex8();                                                                          // 121\n    },                                                                                                       // 122\n    toRgb: function() {                                                                                      // 123\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };          // 124\n    },                                                                                                       // 125\n    toRgbString: function() {                                                                                // 126\n        return (this._a == 1) ?                                                                              // 127\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :       // 128\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },                                                                                                       // 130\n    toPercentageRgb: function() {                                                                            // 131\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },                                                                                                       // 133\n    toPercentageRgbString: function() {                                                                      // 134\n        return (this._a == 1) ?                                                                              // 135\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },                                                                                                       // 138\n    toName: function() {                                                                                     // 139\n        if (this._a === 0) {                                                                                 // 140\n            return \"transparent\";                                                                            // 141\n        }                                                                                                    // 142\n                                                                                                             // 143\n        if (this._a < 1) {                                                                                   // 144\n            return false;                                                                                    // 145\n        }                                                                                                    // 146\n                                                                                                             // 147\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;                                 // 148\n    },                                                                                                       // 149\n    toFilter: function(secondColor) {                                                                        // 150\n        var hex8String = '#' + rgbaToHex(this._r, this._g, this._b, this._a);                                // 151\n        var secondHex8String = hex8String;                                                                   // 152\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";                                   // 153\n                                                                                                             // 154\n        if (secondColor) {                                                                                   // 155\n            var s = tinycolor(secondColor);                                                                  // 156\n            secondHex8String = s.toHex8String();                                                             // 157\n        }                                                                                                    // 158\n                                                                                                             // 159\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },                                                                                                       // 161\n    toString: function(format) {                                                                             // 162\n        var formatSet = !!format;                                                                            // 163\n        format = format || this._format;                                                                     // 164\n                                                                                                             // 165\n        var formattedString = false;                                                                         // 166\n        var hasAlpha = this._a < 1 && this._a >= 0;                                                          // 167\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"name\");\n                                                                                                             // 169\n        if (needsAlphaFormat) {                                                                              // 170\n            // Special case for \"transparent\", all other non-alpha formats                                   // 171\n            // will return rgba when there is transparency.                                                  // 172\n            if (format === \"name\" && this._a === 0) {                                                        // 173\n                return this.toName();                                                                        // 174\n            }                                                                                                // 175\n            return this.toRgbString();                                                                       // 176\n        }                                                                                                    // 177\n        if (format === \"rgb\") {                                                                              // 178\n            formattedString = this.toRgbString();                                                            // 179\n        }                                                                                                    // 180\n        if (format === \"prgb\") {                                                                             // 181\n            formattedString = this.toPercentageRgbString();                                                  // 182\n        }                                                                                                    // 183\n        if (format === \"hex\" || format === \"hex6\") {                                                         // 184\n            formattedString = this.toHexString();                                                            // 185\n        }                                                                                                    // 186\n        if (format === \"hex3\") {                                                                             // 187\n            formattedString = this.toHexString(true);                                                        // 188\n        }                                                                                                    // 189\n        if (format === \"hex8\") {                                                                             // 190\n            formattedString = this.toHex8String();                                                           // 191\n        }                                                                                                    // 192\n        if (format === \"name\") {                                                                             // 193\n            formattedString = this.toName();                                                                 // 194\n        }                                                                                                    // 195\n        if (format === \"hsl\") {                                                                              // 196\n            formattedString = this.toHslString();                                                            // 197\n        }                                                                                                    // 198\n        if (format === \"hsv\") {                                                                              // 199\n            formattedString = this.toHsvString();                                                            // 200\n        }                                                                                                    // 201\n                                                                                                             // 202\n        return formattedString || this.toHexString();                                                        // 203\n    },                                                                                                       // 204\n                                                                                                             // 205\n    _applyModification: function(fn, args) {                                                                 // 206\n        var color = fn.apply(null, [this].concat([].slice.call(args)));                                      // 207\n        this._r = color._r;                                                                                  // 208\n        this._g = color._g;                                                                                  // 209\n        this._b = color._b;                                                                                  // 210\n        this.setAlpha(color._a);                                                                             // 211\n        return this;                                                                                         // 212\n    },                                                                                                       // 213\n    lighten: function() {                                                                                    // 214\n        return this._applyModification(lighten, arguments);                                                  // 215\n    },                                                                                                       // 216\n    brighten: function() {                                                                                   // 217\n        return this._applyModification(brighten, arguments);                                                 // 218\n    },                                                                                                       // 219\n    darken: function() {                                                                                     // 220\n        return this._applyModification(darken, arguments);                                                   // 221\n    },                                                                                                       // 222\n    desaturate: function() {                                                                                 // 223\n        return this._applyModification(desaturate, arguments);                                               // 224\n    },                                                                                                       // 225\n    saturate: function() {                                                                                   // 226\n        return this._applyModification(saturate, arguments);                                                 // 227\n    },                                                                                                       // 228\n    greyscale: function() {                                                                                  // 229\n        return this._applyModification(greyscale, arguments);                                                // 230\n    },                                                                                                       // 231\n    spin: function() {                                                                                       // 232\n        return this._applyModification(spin, arguments);                                                     // 233\n    },                                                                                                       // 234\n                                                                                                             // 235\n    _applyCombination: function(fn, args) {                                                                  // 236\n        return fn.apply(null, [this].concat([].slice.call(args)));                                           // 237\n    },                                                                                                       // 238\n    analogous: function() {                                                                                  // 239\n        return this._applyCombination(analogous, arguments);                                                 // 240\n    },                                                                                                       // 241\n    complement: function() {                                                                                 // 242\n        return this._applyCombination(complement, arguments);                                                // 243\n    },                                                                                                       // 244\n    monochromatic: function() {                                                                              // 245\n        return this._applyCombination(monochromatic, arguments);                                             // 246\n    },                                                                                                       // 247\n    splitcomplement: function() {                                                                            // 248\n        return this._applyCombination(splitcomplement, arguments);                                           // 249\n    },                                                                                                       // 250\n    triad: function() {                                                                                      // 251\n        return this._applyCombination(triad, arguments);                                                     // 252\n    },                                                                                                       // 253\n    tetrad: function() {                                                                                     // 254\n        return this._applyCombination(tetrad, arguments);                                                    // 255\n    }                                                                                                        // 256\n};                                                                                                           // 257\n                                                                                                             // 258\n// If input is an object, force 1 into \"1.0\" to handle ratios properly                                       // 259\n// String input requires \"1.0\" as input, so 1 will be treated as 1                                           // 260\ntinycolor.fromRatio = function(color, opts) {                                                                // 261\n    if (typeof color == \"object\") {                                                                          // 262\n        var newColor = {};                                                                                   // 263\n        for (var i in color) {                                                                               // 264\n            if (color.hasOwnProperty(i)) {                                                                   // 265\n                if (i === \"a\") {                                                                             // 266\n                    newColor[i] = color[i];                                                                  // 267\n                }                                                                                            // 268\n                else {                                                                                       // 269\n                    newColor[i] = convertToPercentage(color[i]);                                             // 270\n                }                                                                                            // 271\n            }                                                                                                // 272\n        }                                                                                                    // 273\n        color = newColor;                                                                                    // 274\n    }                                                                                                        // 275\n                                                                                                             // 276\n    return tinycolor(color, opts);                                                                           // 277\n};                                                                                                           // 278\n                                                                                                             // 279\n// Given a string or object, convert that input to RGB                                                       // 280\n// Possible string inputs:                                                                                   // 281\n//                                                                                                           // 282\n//     \"red\"                                                                                                 // 283\n//     \"#f00\" or \"f00\"                                                                                       // 284\n//     \"#ff0000\" or \"ff0000\"                                                                                 // 285\n//     \"#ff000000\" or \"ff000000\"                                                                             // 286\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"                                                                    // 287\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"                                                                      // 288\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"                                                          // 289\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"                                                          // 290\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"                                                               // 291\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"                                                       // 292\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"                                                             // 293\n//                                                                                                           // 294\nfunction inputToRGB(color) {                                                                                 // 295\n                                                                                                             // 296\n    var rgb = { r: 0, g: 0, b: 0 };                                                                          // 297\n    var a = 1;                                                                                               // 298\n    var ok = false;                                                                                          // 299\n    var format = false;                                                                                      // 300\n                                                                                                             // 301\n    if (typeof color == \"string\") {                                                                          // 302\n        color = stringInputToObject(color);                                                                  // 303\n    }                                                                                                        // 304\n                                                                                                             // 305\n    if (typeof color == \"object\") {                                                                          // 306\n        if (color.hasOwnProperty(\"r\") && color.hasOwnProperty(\"g\") && color.hasOwnProperty(\"b\")) {           // 307\n            rgb = rgbToRgb(color.r, color.g, color.b);                                                       // 308\n            ok = true;                                                                                       // 309\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";                                    // 310\n        }                                                                                                    // 311\n        else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"v\")) {      // 312\n            color.s = convertToPercentage(color.s);                                                          // 313\n            color.v = convertToPercentage(color.v);                                                          // 314\n            rgb = hsvToRgb(color.h, color.s, color.v);                                                       // 315\n            ok = true;                                                                                       // 316\n            format = \"hsv\";                                                                                  // 317\n        }                                                                                                    // 318\n        else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"l\")) {      // 319\n            color.s = convertToPercentage(color.s);                                                          // 320\n            color.l = convertToPercentage(color.l);                                                          // 321\n            rgb = hslToRgb(color.h, color.s, color.l);                                                       // 322\n            ok = true;                                                                                       // 323\n            format = \"hsl\";                                                                                  // 324\n        }                                                                                                    // 325\n                                                                                                             // 326\n        if (color.hasOwnProperty(\"a\")) {                                                                     // 327\n            a = color.a;                                                                                     // 328\n        }                                                                                                    // 329\n    }                                                                                                        // 330\n                                                                                                             // 331\n    a = boundAlpha(a);                                                                                       // 332\n                                                                                                             // 333\n    return {                                                                                                 // 334\n        ok: ok,                                                                                              // 335\n        format: color.format || format,                                                                      // 336\n        r: mathMin(255, mathMax(rgb.r, 0)),                                                                  // 337\n        g: mathMin(255, mathMax(rgb.g, 0)),                                                                  // 338\n        b: mathMin(255, mathMax(rgb.b, 0)),                                                                  // 339\n        a: a                                                                                                 // 340\n    };                                                                                                       // 341\n}                                                                                                            // 342\n                                                                                                             // 343\n                                                                                                             // 344\n// Conversion Functions                                                                                      // 345\n// --------------------                                                                                      // 346\n                                                                                                             // 347\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:                                             // 348\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript> // 349\n                                                                                                             // 350\n// `rgbToRgb`                                                                                                // 351\n// Handle bounds / percentage checking to conform to CSS color spec                                          // 352\n// <http://www.w3.org/TR/css3-color/>                                                                        // 353\n// *Assumes:* r, g, b in [0, 255] or [0, 1]                                                                  // 354\n// *Returns:* { r, g, b } in [0, 255]                                                                        // 355\nfunction rgbToRgb(r, g, b){                                                                                  // 356\n    return {                                                                                                 // 357\n        r: bound01(r, 255) * 255,                                                                            // 358\n        g: bound01(g, 255) * 255,                                                                            // 359\n        b: bound01(b, 255) * 255                                                                             // 360\n    };                                                                                                       // 361\n}                                                                                                            // 362\n                                                                                                             // 363\n// `rgbToHsl`                                                                                                // 364\n// Converts an RGB color value to HSL.                                                                       // 365\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]                                                // 366\n// *Returns:* { h, s, l } in [0,1]                                                                           // 367\nfunction rgbToHsl(r, g, b) {                                                                                 // 368\n                                                                                                             // 369\n    r = bound01(r, 255);                                                                                     // 370\n    g = bound01(g, 255);                                                                                     // 371\n    b = bound01(b, 255);                                                                                     // 372\n                                                                                                             // 373\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);                                                      // 374\n    var h, s, l = (max + min) / 2;                                                                           // 375\n                                                                                                             // 376\n    if(max == min) {                                                                                         // 377\n        h = s = 0; // achromatic                                                                             // 378\n    }                                                                                                        // 379\n    else {                                                                                                   // 380\n        var d = max - min;                                                                                   // 381\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);                                                 // 382\n        switch(max) {                                                                                        // 383\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;                                                // 384\n            case g: h = (b - r) / d + 2; break;                                                              // 385\n            case b: h = (r - g) / d + 4; break;                                                              // 386\n        }                                                                                                    // 387\n                                                                                                             // 388\n        h /= 6;                                                                                              // 389\n    }                                                                                                        // 390\n                                                                                                             // 391\n    return { h: h, s: s, l: l };                                                                             // 392\n}                                                                                                            // 393\n                                                                                                             // 394\n// `hslToRgb`                                                                                                // 395\n// Converts an HSL color value to RGB.                                                                       // 396\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]              // 397\n// *Returns:* { r, g, b } in the set [0, 255]                                                                // 398\nfunction hslToRgb(h, s, l) {                                                                                 // 399\n    var r, g, b;                                                                                             // 400\n                                                                                                             // 401\n    h = bound01(h, 360);                                                                                     // 402\n    s = bound01(s, 100);                                                                                     // 403\n    l = bound01(l, 100);                                                                                     // 404\n                                                                                                             // 405\n    function hue2rgb(p, q, t) {                                                                              // 406\n        if(t < 0) t += 1;                                                                                    // 407\n        if(t > 1) t -= 1;                                                                                    // 408\n        if(t < 1/6) return p + (q - p) * 6 * t;                                                              // 409\n        if(t < 1/2) return q;                                                                                // 410\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;                                                      // 411\n        return p;                                                                                            // 412\n    }                                                                                                        // 413\n                                                                                                             // 414\n    if(s === 0) {                                                                                            // 415\n        r = g = b = l; // achromatic                                                                         // 416\n    }                                                                                                        // 417\n    else {                                                                                                   // 418\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;                                                       // 419\n        var p = 2 * l - q;                                                                                   // 420\n        r = hue2rgb(p, q, h + 1/3);                                                                          // 421\n        g = hue2rgb(p, q, h);                                                                                // 422\n        b = hue2rgb(p, q, h - 1/3);                                                                          // 423\n    }                                                                                                        // 424\n                                                                                                             // 425\n    return { r: r * 255, g: g * 255, b: b * 255 };                                                           // 426\n}                                                                                                            // 427\n                                                                                                             // 428\n// `rgbToHsv`                                                                                                // 429\n// Converts an RGB color value to HSV                                                                        // 430\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]                                        // 431\n// *Returns:* { h, s, v } in [0,1]                                                                           // 432\nfunction rgbToHsv(r, g, b) {                                                                                 // 433\n                                                                                                             // 434\n    r = bound01(r, 255);                                                                                     // 435\n    g = bound01(g, 255);                                                                                     // 436\n    b = bound01(b, 255);                                                                                     // 437\n                                                                                                             // 438\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);                                                      // 439\n    var h, s, v = max;                                                                                       // 440\n                                                                                                             // 441\n    var d = max - min;                                                                                       // 442\n    s = max === 0 ? 0 : d / max;                                                                             // 443\n                                                                                                             // 444\n    if(max == min) {                                                                                         // 445\n        h = 0; // achromatic                                                                                 // 446\n    }                                                                                                        // 447\n    else {                                                                                                   // 448\n        switch(max) {                                                                                        // 449\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;                                                // 450\n            case g: h = (b - r) / d + 2; break;                                                              // 451\n            case b: h = (r - g) / d + 4; break;                                                              // 452\n        }                                                                                                    // 453\n        h /= 6;                                                                                              // 454\n    }                                                                                                        // 455\n    return { h: h, s: s, v: v };                                                                             // 456\n}                                                                                                            // 457\n                                                                                                             // 458\n// `hsvToRgb`                                                                                                // 459\n// Converts an HSV color value to RGB.                                                                       // 460\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]           // 461\n// *Returns:* { r, g, b } in the set [0, 255]                                                                // 462\n function hsvToRgb(h, s, v) {                                                                                // 463\n                                                                                                             // 464\n    h = bound01(h, 360) * 6;                                                                                 // 465\n    s = bound01(s, 100);                                                                                     // 466\n    v = bound01(v, 100);                                                                                     // 467\n                                                                                                             // 468\n    var i = math.floor(h),                                                                                   // 469\n        f = h - i,                                                                                           // 470\n        p = v * (1 - s),                                                                                     // 471\n        q = v * (1 - f * s),                                                                                 // 472\n        t = v * (1 - (1 - f) * s),                                                                           // 473\n        mod = i % 6,                                                                                         // 474\n        r = [v, q, p, p, t, v][mod],                                                                         // 475\n        g = [t, v, v, q, p, p][mod],                                                                         // 476\n        b = [p, p, t, v, v, q][mod];                                                                         // 477\n                                                                                                             // 478\n    return { r: r * 255, g: g * 255, b: b * 255 };                                                           // 479\n}                                                                                                            // 480\n                                                                                                             // 481\n// `rgbToHex`                                                                                                // 482\n// Converts an RGB color to hex                                                                              // 483\n// Assumes r, g, and b are contained in the set [0, 255]                                                     // 484\n// Returns a 3 or 6 character hex                                                                            // 485\nfunction rgbToHex(r, g, b, allow3Char) {                                                                     // 486\n                                                                                                             // 487\n    var hex = [                                                                                              // 488\n        pad2(mathRound(r).toString(16)),                                                                     // 489\n        pad2(mathRound(g).toString(16)),                                                                     // 490\n        pad2(mathRound(b).toString(16))                                                                      // 491\n    ];                                                                                                       // 492\n                                                                                                             // 493\n    // Return a 3 character hex if possible                                                                  // 494\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);                                       // 496\n    }                                                                                                        // 497\n                                                                                                             // 498\n    return hex.join(\"\");                                                                                     // 499\n}                                                                                                            // 500\n    // `rgbaToHex`                                                                                           // 501\n    // Converts an RGBA color plus alpha transparency to hex                                                 // 502\n    // Assumes r, g, b and a are contained in the set [0, 255]                                               // 503\n    // Returns an 8 character hex                                                                            // 504\n    function rgbaToHex(r, g, b, a) {                                                                         // 505\n                                                                                                             // 506\n        var hex = [                                                                                          // 507\n            pad2(convertDecimalToHex(a)),                                                                    // 508\n            pad2(mathRound(r).toString(16)),                                                                 // 509\n            pad2(mathRound(g).toString(16)),                                                                 // 510\n            pad2(mathRound(b).toString(16))                                                                  // 511\n        ];                                                                                                   // 512\n                                                                                                             // 513\n        return hex.join(\"\");                                                                                 // 514\n    }                                                                                                        // 515\n                                                                                                             // 516\n// `equals`                                                                                                  // 517\n// Can be called with any tinycolor input                                                                    // 518\ntinycolor.equals = function (color1, color2) {                                                               // 519\n    if (!color1 || !color2) { return false; }                                                                // 520\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();                               // 521\n};                                                                                                           // 522\ntinycolor.random = function() {                                                                              // 523\n    return tinycolor.fromRatio({                                                                             // 524\n        r: mathRandom(),                                                                                     // 525\n        g: mathRandom(),                                                                                     // 526\n        b: mathRandom()                                                                                      // 527\n    });                                                                                                      // 528\n};                                                                                                           // 529\n                                                                                                             // 530\n                                                                                                             // 531\n// Modification Functions                                                                                    // 532\n// ----------------------                                                                                    // 533\n// Thanks to less.js for some of the basics here                                                             // 534\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>                                  // 535\n                                                                                                             // 536\nfunction desaturate(color, amount) {                                                                         // 537\n    amount = (amount === 0) ? 0 : (amount || 10);                                                            // 538\n    var hsl = tinycolor(color).toHsl();                                                                      // 539\n    hsl.s -= amount / 100;                                                                                   // 540\n    hsl.s = clamp01(hsl.s);                                                                                  // 541\n    return tinycolor(hsl);                                                                                   // 542\n}                                                                                                            // 543\n                                                                                                             // 544\nfunction saturate(color, amount) {                                                                           // 545\n    amount = (amount === 0) ? 0 : (amount || 10);                                                            // 546\n    var hsl = tinycolor(color).toHsl();                                                                      // 547\n    hsl.s += amount / 100;                                                                                   // 548\n    hsl.s = clamp01(hsl.s);                                                                                  // 549\n    return tinycolor(hsl);                                                                                   // 550\n}                                                                                                            // 551\n                                                                                                             // 552\nfunction greyscale(color) {                                                                                  // 553\n    return tinycolor(color).desaturate(100);                                                                 // 554\n}                                                                                                            // 555\n                                                                                                             // 556\nfunction lighten (color, amount) {                                                                           // 557\n    amount = (amount === 0) ? 0 : (amount || 10);                                                            // 558\n    var hsl = tinycolor(color).toHsl();                                                                      // 559\n    hsl.l += amount / 100;                                                                                   // 560\n    hsl.l = clamp01(hsl.l);                                                                                  // 561\n    return tinycolor(hsl);                                                                                   // 562\n}                                                                                                            // 563\n                                                                                                             // 564\nfunction brighten(color, amount) {                                                                           // 565\n    amount = (amount === 0) ? 0 : (amount || 10);                                                            // 566\n    var rgb = tinycolor(color).toRgb();                                                                      // 567\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));                             // 568\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));                             // 569\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));                             // 570\n    return tinycolor(rgb);                                                                                   // 571\n}                                                                                                            // 572\n                                                                                                             // 573\nfunction darken (color, amount) {                                                                            // 574\n    amount = (amount === 0) ? 0 : (amount || 10);                                                            // 575\n    var hsl = tinycolor(color).toHsl();                                                                      // 576\n    hsl.l -= amount / 100;                                                                                   // 577\n    hsl.l = clamp01(hsl.l);                                                                                  // 578\n    return tinycolor(hsl);                                                                                   // 579\n}                                                                                                            // 580\n                                                                                                             // 581\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.                 // 582\n// Values outside of this range will be wrapped into this range.                                             // 583\nfunction spin(color, amount) {                                                                               // 584\n    var hsl = tinycolor(color).toHsl();                                                                      // 585\n    var hue = (mathRound(hsl.h) + amount) % 360;                                                             // 586\n    hsl.h = hue < 0 ? 360 + hue : hue;                                                                       // 587\n    return tinycolor(hsl);                                                                                   // 588\n}                                                                                                            // 589\n                                                                                                             // 590\n// Combination Functions                                                                                     // 591\n// ---------------------                                                                                     // 592\n// Thanks to jQuery xColor for some of the ideas behind these                                                // 593\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>                                  // 594\n                                                                                                             // 595\nfunction complement(color) {                                                                                 // 596\n    var hsl = tinycolor(color).toHsl();                                                                      // 597\n    hsl.h = (hsl.h + 180) % 360;                                                                             // 598\n    return tinycolor(hsl);                                                                                   // 599\n}                                                                                                            // 600\n                                                                                                             // 601\nfunction triad(color) {                                                                                      // 602\n    var hsl = tinycolor(color).toHsl();                                                                      // 603\n    var h = hsl.h;                                                                                           // 604\n    return [                                                                                                 // 605\n        tinycolor(color),                                                                                    // 606\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),                                               // 607\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })                                                // 608\n    ];                                                                                                       // 609\n}                                                                                                            // 610\n                                                                                                             // 611\nfunction tetrad(color) {                                                                                     // 612\n    var hsl = tinycolor(color).toHsl();                                                                      // 613\n    var h = hsl.h;                                                                                           // 614\n    return [                                                                                                 // 615\n        tinycolor(color),                                                                                    // 616\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),                                                // 617\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),                                               // 618\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })                                                // 619\n    ];                                                                                                       // 620\n}                                                                                                            // 621\n                                                                                                             // 622\nfunction splitcomplement(color) {                                                                            // 623\n    var hsl = tinycolor(color).toHsl();                                                                      // 624\n    var h = hsl.h;                                                                                           // 625\n    return [                                                                                                 // 626\n        tinycolor(color),                                                                                    // 627\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),                                                 // 628\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})                                                 // 629\n    ];                                                                                                       // 630\n}                                                                                                            // 631\n                                                                                                             // 632\nfunction analogous(color, results, slices) {                                                                 // 633\n    results = results || 6;                                                                                  // 634\n    slices = slices || 30;                                                                                   // 635\n                                                                                                             // 636\n    var hsl = tinycolor(color).toHsl();                                                                      // 637\n    var part = 360 / slices;                                                                                 // 638\n    var ret = [tinycolor(color)];                                                                            // 639\n                                                                                                             // 640\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {                               // 641\n        hsl.h = (hsl.h + part) % 360;                                                                        // 642\n        ret.push(tinycolor(hsl));                                                                            // 643\n    }                                                                                                        // 644\n    return ret;                                                                                              // 645\n}                                                                                                            // 646\n                                                                                                             // 647\nfunction monochromatic(color, results) {                                                                     // 648\n    results = results || 6;                                                                                  // 649\n    var hsv = tinycolor(color).toHsv();                                                                      // 650\n    var h = hsv.h, s = hsv.s, v = hsv.v;                                                                     // 651\n    var ret = [];                                                                                            // 652\n    var modification = 1 / results;                                                                          // 653\n                                                                                                             // 654\n    while (results--) {                                                                                      // 655\n        ret.push(tinycolor({ h: h, s: s, v: v}));                                                            // 656\n        v = (v + modification) % 1;                                                                          // 657\n    }                                                                                                        // 658\n                                                                                                             // 659\n    return ret;                                                                                              // 660\n}                                                                                                            // 661\n                                                                                                             // 662\n// Utility Functions                                                                                         // 663\n// ---------------------                                                                                     // 664\n                                                                                                             // 665\ntinycolor.mix = function(color1, color2, amount) {                                                           // 666\n    amount = (amount === 0) ? 0 : (amount || 50);                                                            // 667\n                                                                                                             // 668\n    var rgb1 = tinycolor(color1).toRgb();                                                                    // 669\n    var rgb2 = tinycolor(color2).toRgb();                                                                    // 670\n                                                                                                             // 671\n    var p = amount / 100;                                                                                    // 672\n    var w = p * 2 - 1;                                                                                       // 673\n    var a = rgb2.a - rgb1.a;                                                                                 // 674\n                                                                                                             // 675\n    var w1;                                                                                                  // 676\n                                                                                                             // 677\n    if (w * a == -1) {                                                                                       // 678\n        w1 = w;                                                                                              // 679\n    } else {                                                                                                 // 680\n        w1 = (w + a) / (1 + w * a);                                                                          // 681\n    }                                                                                                        // 682\n                                                                                                             // 683\n    w1 = (w1 + 1) / 2;                                                                                       // 684\n                                                                                                             // 685\n    var w2 = 1 - w1;                                                                                         // 686\n                                                                                                             // 687\n    var rgba = {                                                                                             // 688\n        r: rgb2.r * w1 + rgb1.r * w2,                                                                        // 689\n        g: rgb2.g * w1 + rgb1.g * w2,                                                                        // 690\n        b: rgb2.b * w1 + rgb1.b * w2,                                                                        // 691\n        a: rgb2.a * p  + rgb1.a * (1 - p)                                                                    // 692\n    };                                                                                                       // 693\n                                                                                                             // 694\n    return tinycolor(rgba);                                                                                  // 695\n};                                                                                                           // 696\n                                                                                                             // 697\n                                                                                                             // 698\n// Readability Functions                                                                                     // 699\n// ---------------------                                                                                     // 700\n// <http://www.w3.org/TR/AERT#color-contrast>                                                                // 701\n                                                                                                             // 702\n// `readability`                                                                                             // 703\n// Analyze the 2 colors and returns an object with the following properties:                                 // 704\n//    `brightness`: difference in brightness between the two colors                                          // 705\n//    `color`: difference in color/hue between the two colors                                                // 706\ntinycolor.readability = function(color1, color2) {                                                           // 707\n    var c1 = tinycolor(color1);                                                                              // 708\n    var c2 = tinycolor(color2);                                                                              // 709\n    var rgb1 = c1.toRgb();                                                                                   // 710\n    var rgb2 = c2.toRgb();                                                                                   // 711\n    var brightnessA = c1.getBrightness();                                                                    // 712\n    var brightnessB = c2.getBrightness();                                                                    // 713\n    var colorDiff = (                                                                                        // 714\n        Math.max(rgb1.r, rgb2.r) - Math.min(rgb1.r, rgb2.r) +                                                // 715\n        Math.max(rgb1.g, rgb2.g) - Math.min(rgb1.g, rgb2.g) +                                                // 716\n        Math.max(rgb1.b, rgb2.b) - Math.min(rgb1.b, rgb2.b)                                                  // 717\n    );                                                                                                       // 718\n                                                                                                             // 719\n    return {                                                                                                 // 720\n        brightness: Math.abs(brightnessA - brightnessB),                                                     // 721\n        color: colorDiff                                                                                     // 722\n    };                                                                                                       // 723\n};                                                                                                           // 724\n                                                                                                             // 725\n// `readable`                                                                                                // 726\n// http://www.w3.org/TR/AERT#color-contrast                                                                  // 727\n// Ensure that foreground and background color combinations provide sufficient contrast.                     // 728\n// *Example*                                                                                                 // 729\n//    tinycolor.isReadable(\"#000\", \"#111\") => false                                                          // 730\ntinycolor.isReadable = function(color1, color2) {                                                            // 731\n    var readability = tinycolor.readability(color1, color2);                                                 // 732\n    return readability.brightness > 125 && readability.color > 500;                                          // 733\n};                                                                                                           // 734\n                                                                                                             // 735\n// `mostReadable`                                                                                            // 736\n// Given a base color and a list of possible foreground or background                                        // 737\n// colors for that base, returns the most readable color.                                                    // 738\n// *Example*                                                                                                 // 739\n//    tinycolor.mostReadable(\"#123\", [\"#fff\", \"#000\"]) => \"#000\"                                             // 740\ntinycolor.mostReadable = function(baseColor, colorList) {                                                    // 741\n    var bestColor = null;                                                                                    // 742\n    var bestScore = 0;                                                                                       // 743\n    var bestIsReadable = false;                                                                              // 744\n    for (var i=0; i < colorList.length; i++) {                                                               // 745\n                                                                                                             // 746\n        // We normalize both around the \"acceptable\" breaking point,                                         // 747\n        // but rank brightness constrast higher than hue.                                                    // 748\n                                                                                                             // 749\n        var readability = tinycolor.readability(baseColor, colorList[i]);                                    // 750\n        var readable = readability.brightness > 125 && readability.color > 500;                              // 751\n        var score = 3 * (readability.brightness / 125) + (readability.color / 500);                          // 752\n                                                                                                             // 753\n        if ((readable && ! bestIsReadable) ||                                                                // 754\n            (readable && bestIsReadable && score > bestScore) ||                                             // 755\n            ((! readable) && (! bestIsReadable) && score > bestScore)) {                                     // 756\n            bestIsReadable = readable;                                                                       // 757\n            bestScore = score;                                                                               // 758\n            bestColor = tinycolor(colorList[i]);                                                             // 759\n        }                                                                                                    // 760\n    }                                                                                                        // 761\n    return bestColor;                                                                                        // 762\n};                                                                                                           // 763\n                                                                                                             // 764\n                                                                                                             // 765\n// Big List of Colors                                                                                        // 766\n// ------------------                                                                                        // 767\n// <http://www.w3.org/TR/css3-color/#svg-color>                                                              // 768\nvar names = tinycolor.names = {                                                                              // 769\n    aliceblue: \"f0f8ff\",                                                                                     // 770\n    antiquewhite: \"faebd7\",                                                                                  // 771\n    aqua: \"0ff\",                                                                                             // 772\n    aquamarine: \"7fffd4\",                                                                                    // 773\n    azure: \"f0ffff\",                                                                                         // 774\n    beige: \"f5f5dc\",                                                                                         // 775\n    bisque: \"ffe4c4\",                                                                                        // 776\n    black: \"000\",                                                                                            // 777\n    blanchedalmond: \"ffebcd\",                                                                                // 778\n    blue: \"00f\",                                                                                             // 779\n    blueviolet: \"8a2be2\",                                                                                    // 780\n    brown: \"a52a2a\",                                                                                         // 781\n    burlywood: \"deb887\",                                                                                     // 782\n    burntsienna: \"ea7e5d\",                                                                                   // 783\n    cadetblue: \"5f9ea0\",                                                                                     // 784\n    chartreuse: \"7fff00\",                                                                                    // 785\n    chocolate: \"d2691e\",                                                                                     // 786\n    coral: \"ff7f50\",                                                                                         // 787\n    cornflowerblue: \"6495ed\",                                                                                // 788\n    cornsilk: \"fff8dc\",                                                                                      // 789\n    crimson: \"dc143c\",                                                                                       // 790\n    cyan: \"0ff\",                                                                                             // 791\n    darkblue: \"00008b\",                                                                                      // 792\n    darkcyan: \"008b8b\",                                                                                      // 793\n    darkgoldenrod: \"b8860b\",                                                                                 // 794\n    darkgray: \"a9a9a9\",                                                                                      // 795\n    darkgreen: \"006400\",                                                                                     // 796\n    darkgrey: \"a9a9a9\",                                                                                      // 797\n    darkkhaki: \"bdb76b\",                                                                                     // 798\n    darkmagenta: \"8b008b\",                                                                                   // 799\n    darkolivegreen: \"556b2f\",                                                                                // 800\n    darkorange: \"ff8c00\",                                                                                    // 801\n    darkorchid: \"9932cc\",                                                                                    // 802\n    darkred: \"8b0000\",                                                                                       // 803\n    darksalmon: \"e9967a\",                                                                                    // 804\n    darkseagreen: \"8fbc8f\",                                                                                  // 805\n    darkslateblue: \"483d8b\",                                                                                 // 806\n    darkslategray: \"2f4f4f\",                                                                                 // 807\n    darkslategrey: \"2f4f4f\",                                                                                 // 808\n    darkturquoise: \"00ced1\",                                                                                 // 809\n    darkviolet: \"9400d3\",                                                                                    // 810\n    deeppink: \"ff1493\",                                                                                      // 811\n    deepskyblue: \"00bfff\",                                                                                   // 812\n    dimgray: \"696969\",                                                                                       // 813\n    dimgrey: \"696969\",                                                                                       // 814\n    dodgerblue: \"1e90ff\",                                                                                    // 815\n    firebrick: \"b22222\",                                                                                     // 816\n    floralwhite: \"fffaf0\",                                                                                   // 817\n    forestgreen: \"228b22\",                                                                                   // 818\n    fuchsia: \"f0f\",                                                                                          // 819\n    gainsboro: \"dcdcdc\",                                                                                     // 820\n    ghostwhite: \"f8f8ff\",                                                                                    // 821\n    gold: \"ffd700\",                                                                                          // 822\n    goldenrod: \"daa520\",                                                                                     // 823\n    gray: \"808080\",                                                                                          // 824\n    green: \"008000\",                                                                                         // 825\n    greenyellow: \"adff2f\",                                                                                   // 826\n    grey: \"808080\",                                                                                          // 827\n    honeydew: \"f0fff0\",                                                                                      // 828\n    hotpink: \"ff69b4\",                                                                                       // 829\n    indianred: \"cd5c5c\",                                                                                     // 830\n    indigo: \"4b0082\",                                                                                        // 831\n    ivory: \"fffff0\",                                                                                         // 832\n    khaki: \"f0e68c\",                                                                                         // 833\n    lavender: \"e6e6fa\",                                                                                      // 834\n    lavenderblush: \"fff0f5\",                                                                                 // 835\n    lawngreen: \"7cfc00\",                                                                                     // 836\n    lemonchiffon: \"fffacd\",                                                                                  // 837\n    lightblue: \"add8e6\",                                                                                     // 838\n    lightcoral: \"f08080\",                                                                                    // 839\n    lightcyan: \"e0ffff\",                                                                                     // 840\n    lightgoldenrodyellow: \"fafad2\",                                                                          // 841\n    lightgray: \"d3d3d3\",                                                                                     // 842\n    lightgreen: \"90ee90\",                                                                                    // 843\n    lightgrey: \"d3d3d3\",                                                                                     // 844\n    lightpink: \"ffb6c1\",                                                                                     // 845\n    lightsalmon: \"ffa07a\",                                                                                   // 846\n    lightseagreen: \"20b2aa\",                                                                                 // 847\n    lightskyblue: \"87cefa\",                                                                                  // 848\n    lightslategray: \"789\",                                                                                   // 849\n    lightslategrey: \"789\",                                                                                   // 850\n    lightsteelblue: \"b0c4de\",                                                                                // 851\n    lightyellow: \"ffffe0\",                                                                                   // 852\n    lime: \"0f0\",                                                                                             // 853\n    limegreen: \"32cd32\",                                                                                     // 854\n    linen: \"faf0e6\",                                                                                         // 855\n    magenta: \"f0f\",                                                                                          // 856\n    maroon: \"800000\",                                                                                        // 857\n    mediumaquamarine: \"66cdaa\",                                                                              // 858\n    mediumblue: \"0000cd\",                                                                                    // 859\n    mediumorchid: \"ba55d3\",                                                                                  // 860\n    mediumpurple: \"9370db\",                                                                                  // 861\n    mediumseagreen: \"3cb371\",                                                                                // 862\n    mediumslateblue: \"7b68ee\",                                                                               // 863\n    mediumspringgreen: \"00fa9a\",                                                                             // 864\n    mediumturquoise: \"48d1cc\",                                                                               // 865\n    mediumvioletred: \"c71585\",                                                                               // 866\n    midnightblue: \"191970\",                                                                                  // 867\n    mintcream: \"f5fffa\",                                                                                     // 868\n    mistyrose: \"ffe4e1\",                                                                                     // 869\n    moccasin: \"ffe4b5\",                                                                                      // 870\n    navajowhite: \"ffdead\",                                                                                   // 871\n    navy: \"000080\",                                                                                          // 872\n    oldlace: \"fdf5e6\",                                                                                       // 873\n    olive: \"808000\",                                                                                         // 874\n    olivedrab: \"6b8e23\",                                                                                     // 875\n    orange: \"ffa500\",                                                                                        // 876\n    orangered: \"ff4500\",                                                                                     // 877\n    orchid: \"da70d6\",                                                                                        // 878\n    palegoldenrod: \"eee8aa\",                                                                                 // 879\n    palegreen: \"98fb98\",                                                                                     // 880\n    paleturquoise: \"afeeee\",                                                                                 // 881\n    palevioletred: \"db7093\",                                                                                 // 882\n    papayawhip: \"ffefd5\",                                                                                    // 883\n    peachpuff: \"ffdab9\",                                                                                     // 884\n    peru: \"cd853f\",                                                                                          // 885\n    pink: \"ffc0cb\",                                                                                          // 886\n    plum: \"dda0dd\",                                                                                          // 887\n    powderblue: \"b0e0e6\",                                                                                    // 888\n    purple: \"800080\",                                                                                        // 889\n    red: \"f00\",                                                                                              // 890\n    rosybrown: \"bc8f8f\",                                                                                     // 891\n    royalblue: \"4169e1\",                                                                                     // 892\n    saddlebrown: \"8b4513\",                                                                                   // 893\n    salmon: \"fa8072\",                                                                                        // 894\n    sandybrown: \"f4a460\",                                                                                    // 895\n    seagreen: \"2e8b57\",                                                                                      // 896\n    seashell: \"fff5ee\",                                                                                      // 897\n    sienna: \"a0522d\",                                                                                        // 898\n    silver: \"c0c0c0\",                                                                                        // 899\n    skyblue: \"87ceeb\",                                                                                       // 900\n    slateblue: \"6a5acd\",                                                                                     // 901\n    slategray: \"708090\",                                                                                     // 902\n    slategrey: \"708090\",                                                                                     // 903\n    snow: \"fffafa\",                                                                                          // 904\n    springgreen: \"00ff7f\",                                                                                   // 905\n    steelblue: \"4682b4\",                                                                                     // 906\n    tan: \"d2b48c\",                                                                                           // 907\n    teal: \"008080\",                                                                                          // 908\n    thistle: \"d8bfd8\",                                                                                       // 909\n    tomato: \"ff6347\",                                                                                        // 910\n    turquoise: \"40e0d0\",                                                                                     // 911\n    violet: \"ee82ee\",                                                                                        // 912\n    wheat: \"f5deb3\",                                                                                         // 913\n    white: \"fff\",                                                                                            // 914\n    whitesmoke: \"f5f5f5\",                                                                                    // 915\n    yellow: \"ff0\",                                                                                           // 916\n    yellowgreen: \"9acd32\"                                                                                    // 917\n};                                                                                                           // 918\n                                                                                                             // 919\n// Make it easy to access colors via `hexNames[hex]`                                                         // 920\nvar hexNames = tinycolor.hexNames = flip(names);                                                             // 921\n                                                                                                             // 922\n                                                                                                             // 923\n// Utilities                                                                                                 // 924\n// ---------                                                                                                 // 925\n                                                                                                             // 926\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`                                                       // 927\nfunction flip(o) {                                                                                           // 928\n    var flipped = { };                                                                                       // 929\n    for (var i in o) {                                                                                       // 930\n        if (o.hasOwnProperty(i)) {                                                                           // 931\n            flipped[o[i]] = i;                                                                               // 932\n        }                                                                                                    // 933\n    }                                                                                                        // 934\n    return flipped;                                                                                          // 935\n}                                                                                                            // 936\n                                                                                                             // 937\n// Return a valid alpha value [0,1] with all invalid values being set to 1                                   // 938\nfunction boundAlpha(a) {                                                                                     // 939\n    a = parseFloat(a);                                                                                       // 940\n                                                                                                             // 941\n    if (isNaN(a) || a < 0 || a > 1) {                                                                        // 942\n        a = 1;                                                                                               // 943\n    }                                                                                                        // 944\n                                                                                                             // 945\n    return a;                                                                                                // 946\n}                                                                                                            // 947\n                                                                                                             // 948\n// Take input from [0, n] and return it as [0, 1]                                                            // 949\nfunction bound01(n, max) {                                                                                   // 950\n    if (isOnePointZero(n)) { n = \"100%\"; }                                                                   // 951\n                                                                                                             // 952\n    var processPercent = isPercentage(n);                                                                    // 953\n    n = mathMin(max, mathMax(0, parseFloat(n)));                                                             // 954\n                                                                                                             // 955\n    // Automatically convert percentage into number                                                          // 956\n    if (processPercent) {                                                                                    // 957\n        n = parseInt(n * max, 10) / 100;                                                                     // 958\n    }                                                                                                        // 959\n                                                                                                             // 960\n    // Handle floating point rounding errors                                                                 // 961\n    if ((math.abs(n - max) < 0.000001)) {                                                                    // 962\n        return 1;                                                                                            // 963\n    }                                                                                                        // 964\n                                                                                                             // 965\n    // Convert into [0, 1] range if it isn't already                                                         // 966\n    return (n % max) / parseFloat(max);                                                                      // 967\n}                                                                                                            // 968\n                                                                                                             // 969\n// Force a number between 0 and 1                                                                            // 970\nfunction clamp01(val) {                                                                                      // 971\n    return mathMin(1, mathMax(0, val));                                                                      // 972\n}                                                                                                            // 973\n                                                                                                             // 974\n// Parse a base-16 hex value into a base-10 integer                                                          // 975\nfunction parseIntFromHex(val) {                                                                              // 976\n    return parseInt(val, 16);                                                                                // 977\n}                                                                                                            // 978\n                                                                                                             // 979\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1            // 980\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>   // 981\nfunction isOnePointZero(n) {                                                                                 // 982\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;                              // 983\n}                                                                                                            // 984\n                                                                                                             // 985\n// Check to see if string passed in is a percentage                                                          // 986\nfunction isPercentage(n) {                                                                                   // 987\n    return typeof n === \"string\" && n.indexOf('%') != -1;                                                    // 988\n}                                                                                                            // 989\n                                                                                                             // 990\n// Force a hex value to have 2 characters                                                                    // 991\nfunction pad2(c) {                                                                                           // 992\n    return c.length == 1 ? '0' + c : '' + c;                                                                 // 993\n}                                                                                                            // 994\n                                                                                                             // 995\n// Replace a decimal with it's percentage value                                                              // 996\nfunction convertToPercentage(n) {                                                                            // 997\n    if (n <= 1) {                                                                                            // 998\n        n = (n * 100) + \"%\";                                                                                 // 999\n    }                                                                                                        // 1000\n                                                                                                             // 1001\n    return n;                                                                                                // 1002\n}                                                                                                            // 1003\n                                                                                                             // 1004\n// Converts a decimal to a hex value                                                                         // 1005\nfunction convertDecimalToHex(d) {                                                                            // 1006\n    return Math.round(parseFloat(d) * 255).toString(16);                                                     // 1007\n}                                                                                                            // 1008\n// Converts a hex value to a decimal                                                                         // 1009\nfunction convertHexToDecimal(h) {                                                                            // 1010\n    return (parseIntFromHex(h) / 255);                                                                       // 1011\n}                                                                                                            // 1012\n                                                                                                             // 1013\nvar matchers = (function() {                                                                                 // 1014\n                                                                                                             // 1015\n    // <http://www.w3.org/TR/css3-values/#integers>                                                          // 1016\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";                                                                       // 1017\n                                                                                                             // 1018\n    // <http://www.w3.org/TR/css3-values/#number-value>                                                      // 1019\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";                                                                 // 1020\n                                                                                                             // 1021\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.        // 1022\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";                                         // 1023\n                                                                                                             // 1024\n    // Actual matching.                                                                                      // 1025\n    // Parentheses and commas are optional, but not required.                                                // 1026\n    // Whitespace can take the place of commas or opening paren                                              // 1027\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n                                                                                                             // 1030\n    return {                                                                                                 // 1031\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),                                                          // 1032\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),                                                        // 1033\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),                                                          // 1034\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),                                                        // 1035\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),                                                          // 1036\n        hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,                                          // 1037\n        hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,                                          // 1038\n        hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/                           // 1039\n    };                                                                                                       // 1040\n})();                                                                                                        // 1041\n                                                                                                             // 1042\n// `stringInputToObject`                                                                                     // 1043\n// Permissive string parsing.  Take in a number of formats, and output an object                             // 1044\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`                         // 1045\nfunction stringInputToObject(color) {                                                                        // 1046\n                                                                                                             // 1047\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();                                 // 1048\n    var named = false;                                                                                       // 1049\n    if (names[color]) {                                                                                      // 1050\n        color = names[color];                                                                                // 1051\n        named = true;                                                                                        // 1052\n    }                                                                                                        // 1053\n    else if (color == 'transparent') {                                                                       // 1054\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };                                                   // 1055\n    }                                                                                                        // 1056\n                                                                                                             // 1057\n    // Try to match string input using regular expressions.                                                  // 1058\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360] // 1059\n    // Just return an object and let the conversion functions handle that.                                   // 1060\n    // This way the result will be the same whether the tinycolor is initialized with string or object.      // 1061\n    var match;                                                                                               // 1062\n    if ((match = matchers.rgb.exec(color))) {                                                                // 1063\n        return { r: match[1], g: match[2], b: match[3] };                                                    // 1064\n    }                                                                                                        // 1065\n    if ((match = matchers.rgba.exec(color))) {                                                               // 1066\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };                                       // 1067\n    }                                                                                                        // 1068\n    if ((match = matchers.hsl.exec(color))) {                                                                // 1069\n        return { h: match[1], s: match[2], l: match[3] };                                                    // 1070\n    }                                                                                                        // 1071\n    if ((match = matchers.hsla.exec(color))) {                                                               // 1072\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };                                       // 1073\n    }                                                                                                        // 1074\n    if ((match = matchers.hsv.exec(color))) {                                                                // 1075\n        return { h: match[1], s: match[2], v: match[3] };                                                    // 1076\n    }                                                                                                        // 1077\n    if ((match = matchers.hex8.exec(color))) {                                                               // 1078\n        return {                                                                                             // 1079\n            a: convertHexToDecimal(match[1]),                                                                // 1080\n            r: parseIntFromHex(match[2]),                                                                    // 1081\n            g: parseIntFromHex(match[3]),                                                                    // 1082\n            b: parseIntFromHex(match[4]),                                                                    // 1083\n            format: named ? \"name\" : \"hex8\"                                                                  // 1084\n        };                                                                                                   // 1085\n    }                                                                                                        // 1086\n    if ((match = matchers.hex6.exec(color))) {                                                               // 1087\n        return {                                                                                             // 1088\n            r: parseIntFromHex(match[1]),                                                                    // 1089\n            g: parseIntFromHex(match[2]),                                                                    // 1090\n            b: parseIntFromHex(match[3]),                                                                    // 1091\n            format: named ? \"name\" : \"hex\"                                                                   // 1092\n        };                                                                                                   // 1093\n    }                                                                                                        // 1094\n    if ((match = matchers.hex3.exec(color))) {                                                               // 1095\n        return {                                                                                             // 1096\n            r: parseIntFromHex(match[1] + '' + match[1]),                                                    // 1097\n            g: parseIntFromHex(match[2] + '' + match[2]),                                                    // 1098\n            b: parseIntFromHex(match[3] + '' + match[3]),                                                    // 1099\n            format: named ? \"name\" : \"hex\"                                                                   // 1100\n        };                                                                                                   // 1101\n    }                                                                                                        // 1102\n                                                                                                             // 1103\n    return false;                                                                                            // 1104\n}                                                                                                            // 1105\n                                                                                                             // 1106\nreturn tinycolor;                                                                                            // 1107\n                                                                                                             // 1108\n////////////////////////////////////////////////////////////////////////////////                             // 1109\n// END LIBRARY CODE                                                                                          // 1110\n////////////////////////////////////////////////////////////////////////////////                             // 1111\n                                                                                                             // 1112\n    })();                                                                                                    // 1113\n                                                                                                             // 1114\n////////////////////////////////////////////////////////////////////////////////                             // 1115\n// EXPORTS                                                                                                   // 1116\n////////////////////////////////////////////////////////////////////////////////                             // 1117\n                                                                                                             // 1118\n// Meteor                                                                                                    // 1119\nif (typeof Package !== 'undefined') {                                                                        // 1120\n    tinycolor = _tinycolor;                                                                                  // 1121\n}                                                                                                            // 1122\n// AMD / RequireJS                                                                                           // 1123\nelse if (typeof define !== 'undefined' && define.amd) {                                                      // 1124\n  define([], function () {                                                                                   // 1125\n      return _tinycolor;                                                                                     // 1126\n  });                                                                                                        // 1127\n}                                                                                                            // 1128\n// Node.js                                                                                                   // 1129\nelse if (typeof module !== 'undefined' && module.exports) {                                                  // 1130\n  module.exports = _tinycolor;                                                                               // 1131\n}                                                                                                            // 1132\n// included directly via <script> tag                                                                        // 1133\nelse {                                                                                                       // 1134\n  root.tinycolor = _tinycolor;                                                                               // 1135\n}                                                                                                            // 1136\n                                                                                                             // 1137\n})();                                                                                                        // 1138\n                                                                                                             // 1139\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}