{"version":3,"sources":["meteor://ðŸ’»app/packages/kestanous_herald/packages/kestanous_herald.js"],"names":[],"mappingsfile":"/packages/kestanous_herald.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kestanous:herald/lib/$herald.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n//This is our Global Object. $herald.js will be the first file loaded                                                 // 1\nHerald = {                                                                                                            // 2\n  //Notification global settings                                                                                      // 3\n  settings: {                                                                                                         // 4\n    overrides: {}, //disable functionality for all users.                                                             // 5\n    queueTimer: 60000,                                                                                                // 6\n    userPreferenceDefault: true,                                                                                      // 7\n    collectionName: 'notifications',                                                                                  // 8\n    useIronRouter: true,                                                                                              // 9\n    expireAfterSeconds: 0                                                                                             // 10\n  },                                                                                                                  // 11\n                                                                                                                      // 12\n  //media and runners                                                                                                 // 13\n  _media: function () { //supported media, extension packages should push new kinds                                   // 14\n    return _.union(_.keys(Herald._serverRunners), _.keys(Herald._clientRunners))                                      // 15\n  },                                                                                                                  // 16\n  _serverRunners: {}, //extension packages load their code here on servers                                            // 17\n  _clientRunners: {}, //extension packages load their code here on clients                                            // 18\n  _runnerCheckers: {}, //test if courier media data is valid                                                          // 19\n                                                                                                                      // 20\n                                                                                                                      // 21\n  //couriers                                                                                                          // 22\n  _couriers: {},                                                                                                      // 23\n  _extentionParams: [] //UNDOCUMENTED: allow for more top level params on EventTypes                                  // 24\n};                                                                                                                    // 25\n                                                                                                                      // 26\n// Package users can define a predefined message from the notification instance.                                      // 27\n// It requires the user pass a options.message function, string, or object.                                           // 28\n//                                                                                                                    // 29\n// If its a function it will be run with the from the instance scope                                                  // 30\n//                                                                                                                    // 31\n// If its a string it will return a template with the instance                                                        // 32\n// as its data.                                                                                                       // 33\n//                                                                                                                    // 34\n// If its an object it will run any number of templates or functions based on the optional                            // 35\n// string argument given at the time of call. If no string is passed it will default                                  // 36\n// to 'default'. From there it acts the same as ether of the above patterns.                                          // 37\nHerald._message = function (template) {                                                                               // 38\n  var message;                                                                                                        // 39\n  var courier = Herald._getCourier(this.courier);                                                                     // 40\n  var messageFormat = courier && courier.messageFormat;                                                               // 41\n                                                                                                                      // 42\n  if (_.isObject(messageFormat) && !_.isFunction(messageFormat) && !_.isString(messageFormat)) {                      // 43\n    message = messageFormat[template] || messageFormat.default;                                                       // 44\n                                                                                                                      // 45\n    if (!message) {                                                                                                   // 46\n      throw new Error('Herald: No default message defined for \"' + this.courier + '\" notifications');                 // 47\n    }                                                                                                                 // 48\n  }                                                                                                                   // 49\n  message = message || messageFormat;                                                                                 // 50\n                                                                                                                      // 51\n  if (_.isFunction(message)) {                                                                                        // 52\n    return message.call(this);                                                                                        // 53\n  }                                                                                                                   // 54\n                                                                                                                      // 55\n  else if (_.isString(message)) {                                                                                     // 56\n    return Blaze.With(this, function () {                                                                             // 57\n      return Template[message];                                                                                       // 58\n    });                                                                                                               // 59\n  }                                                                                                                   // 60\n                                                                                                                      // 61\n  throw new Error('Herald: message not defined for \"' + this.courier + '\" notifications');                            // 62\n};                                                                                                                    // 63\n                                                                                                                      // 64\nHerald._setProperty = function (key, value) {                                                                         // 65\n  var obj = {};                                                                                                       // 66\n  obj[key] = value;                                                                                                   // 67\n  return obj;                                                                                                         // 68\n};                                                                                                                    // 69\n                                                                                                                      // 70\nHerald._getProperty = function (obj, keys) {                                                                          // 71\n  var keys = keys.split('.');                                                                                         // 72\n  _.each(keys, function (key) {                                                                                       // 73\n    obj = obj && obj[key];                                                                                            // 74\n  });                                                                                                                 // 75\n  return obj;                                                                                                         // 76\n};                                                                                                                    // 77\n                                                                                                                      // 78\nHerald._getUser = function (user) {                                                                                   // 79\n  if (_.isString(user)) {                                                                                             // 80\n    user = Meteor.users.findOne(user);                                                                                // 81\n  }                                                                                                                   // 82\n  else if (!_.isObject(user)) {                                                                                       // 83\n    user = Meteor.isClient ? Meteor.user() : Meteor.users.findOne(this.userId);                                       // 84\n  }                                                                                                                   // 85\n  return user;                                                                                                        // 86\n};                                                                                                                    // 87\n                                                                                                                      // 88\n// retrieves from Herald._couriers by default, otherwise from obj                                                     // 89\nHerald._getCourier = function (keys, obj) {                                                                           // 90\n  var courier = obj || Herald._couriers;                                                                              // 91\n  return Herald._getProperty(courier, keys);                                                                          // 92\n};                                                                                                                    // 93\n                                                                                                                      // 94\nHerald._setCourier = function (key, val) {                                                                            // 95\n  var keys = key.split('.');                                                                                          // 96\n  var orig = Herald._couriers;                                                                                        // 97\n  var len = keys.length - 1;                                                                                          // 98\n  for (var i = 0; i < len; i++) {                                                                                     // 99\n    orig[keys[i]] = orig[keys[i]] || {};                                                                              // 100\n    orig = orig[keys[i]];                                                                                             // 101\n  }                                                                                                                   // 102\n  orig[keys[len]] = val;                                                                                              // 103\n  return Herald._getCourier(key);                                                                                     // 104\n}                                                                                                                     // 105\n                                                                                                                      // 106\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kestanous:herald/lib/collection.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nMeteor.startup(function () {                                                                                          // 1\n  //The collection and any instance functionality                                                                     // 2\n  Herald.collection = new Meteor.Collection(Herald.settings.collectionName, {                                         // 3\n    transform: function (notification) {                                                                              // 4\n      if (notification.courier) { //courier may not be available if fields filter was called.                         // 5\n        var courier = Herald._getCourier(notification.courier);                                                       // 6\n        //This is the basic message you want to output. Use in the app or as an email subject line                    // 7\n        // it is optional and is set up with createNotification from the server code.                                 // 8\n        notification.message = function (template) {                                                                  // 9\n          if (template && !_.isString(template))                                                                      // 10\n            throw new Error('Herald: message argument must be undefined or a string')                                 // 11\n          if (courier.messageFormat)                                                                                  // 12\n            return Herald._message.call(this, template);                                                              // 13\n                                                                                                                      // 14\n          throw new Error('Herald: no message defined for \"' + this.courier + '\"');                                   // 15\n        };                                                                                                            // 16\n                                                                                                                      // 17\n        if (courier && courier.transform) {                                                                           // 18\n          _.defaults(notification, courier.transform);                                                                // 19\n        }                                                                                                             // 20\n      };                                                                                                              // 21\n      return notification;                                                                                            // 22\n    }                                                                                                                 // 23\n  });                                                                                                                 // 24\n                                                                                                                      // 25\n  var expireTime = Herald.settings.expireAfterSeconds;                                                                // 26\n  if (Meteor.isServer && expireTime && Herald.collection.find().count() === 0) {                                      // 27\n    Herald.collection._ensureIndex({ 'timestamp': 1 }, { 'expireAfterSeconds': expireTime });                         // 28\n  }                                                                                                                   // 29\n                                                                                                                      // 30\n  //Minimum requirement for notifications to work while still providing                                               // 31\n  //basic security. For added limitations use `Herald.deny` in                                                        // 32\n  //your app.                                                                                                         // 33\n  Herald.collection.allow({                                                                                           // 34\n    insert: function (userId, doc) {                                                                                  // 35\n      // new notifications can only be created via a Meteor method                                                    // 36\n      return false;                                                                                                   // 37\n    },                                                                                                                // 38\n    update: function (userId, doc) {                                                                                  // 39\n      return userId == doc.userId;                                                                                    // 40\n    },                                                                                                                // 41\n    remove: function (userId, doc) {                                                                                  // 42\n      return userId == doc.userId;                                                                                    // 43\n    }                                                                                                                 // 44\n  });                                                                                                                 // 45\n});                                                                                                                   // 46\n                                                                                                                      // 47\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kestanous:herald/lib/couriers.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nHerald.addCourier = function (key, options) {                                                                         // 1\n  check(key, String);                                                                                                 // 2\n  check(options, Object);                                                                                             // 3\n                                                                                                                      // 4\n  if (Herald._getCourier(key))                                                                                        // 5\n    throw new Error('Herald: courier \"' + key + '\"\" already exists');                                                 // 6\n                                                                                                                      // 7\n  var courier = Herald._setCourier(key, {                                                                             // 8\n    messageFormat: options.message                                                                                    // 9\n  });                                                                                                                 // 10\n                                                                                                                      // 11\n  //media is required but should only throw exceptions on the server, where it is needed.                             // 12\n  if (Meteor.isServer) {                                                                                              // 13\n    check(options.media, Object);                                                                                     // 14\n                                                                                                                      // 15\n    var media = _.keys(options.media);                                                                                // 16\n    if (!media.length)                                                                                                // 17\n      throw new Error('Herald: courier \"' + key + '\" must have at least one medium');                                 // 18\n                                                                                                                      // 19\n    media.forEach(function (medium) {                                                                                 // 20\n      if (!_.contains(Herald._media(), medium))                                                                       // 21\n        throw new Error('Herald: medium \"' + medium + '\" is not a known media');                                      // 22\n                                                                                                                      // 23\n      Herald._runnerCheckers[medium].call(options.media[medium]);                                                     // 24\n    });                                                                                                               // 25\n  }                                                                                                                   // 26\n  //define on both                                                                                                    // 27\n  courier.media = options.media;                                                                                      // 28\n  courier.transform = options.transform;                                                                              // 29\n                                                                                                                      // 30\n  //white-listed params from extension packages                                                                       // 31\n  _.extend(courier, _.pick(options, Herald._extentionParams));                                                        // 32\n};                                                                                                                    // 33\n                                                                                                                      // 34\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kestanous:herald/lib/runners.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nHerald.addRunner = function (object) {                                                                                // 1\n  if (!_.isObject(object)) throw new Error('Herald: Runner must have an `object` argument');                          // 2\n  if (! _.isString(object.name)) throw new Error('Herald: Runner must medium `name`');                                // 3\n  if (!_.isFunction(object.run)) throw new Error('Herald: Runner must have a `run` function');                        // 4\n  if (!_.isFunction(object.check)) throw new Error('Herald: Runner must have a `check` function');                    // 5\n  if (! (_.isArray(object.where) || _.isString(object.where)))                                                        // 6\n    throw new Error('Herald: Runner `where` must be a valid environment');                                            // 7\n                                                                                                                      // 8\n  var where = _.isString(object.where) ? [object.where] : object.where;                                               // 9\n                                                                                                                      // 10\n  _.each(where, function (where) {                                                                                    // 11\n    if (where === 'server')                                                                                           // 12\n      Herald._serverRunners[object.name] = object.run;                                                                // 13\n    if (where === 'client')                                                                                           // 14\n      Herald._clientRunners[object.name] = object.run;                                                                // 15\n  });                                                                                                                 // 16\n                                                                                                                      // 17\n  Herald._runnerCheckers[object.name] = object.check;                                                                 // 18\n}                                                                                                                     // 19\n                                                                                                                      // 20\n                                                                                                                      // 21\nonRun = function () {};                                                                                               // 22\nonRun.prototype.run = function () {                                                                                   // 23\n  return { command: 'run' };                                                                                          // 24\n};                                                                                                                    // 25\n                                                                                                                      // 26\nonRun.prototype.stop = function () {                                                                                  // 27\n  return { command: 'stop' };                                                                                         // 28\n};                                                                                                                    // 29\n                                                                                                                      // 30\nonRun.prototype.delay = function (time) {                                                                             // 31\n  return { command: 'delay', time: time };                                                                            // 32\n};                                                                                                                    // 33\n                                                                                                                      // 34\nonRun.prototype.transfer = function (name, time) {                                                                    // 35\n  return { command: 'transfer', name: name, time: time };                                                             // 36\n};                                                                                                                    // 37\n                                                                                                                      // 38\n                                                                                                                      // 39\nonRunResolve = function (notification, medium, result, run) {                                                         // 40\n  switch (result.command) {                                                                                           // 41\n    case 'run':                                                                                                       // 42\n      //run true, but invalidation could have been triggered elsewhere so don't change                                // 43\n      break;                                                                                                          // 44\n    case 'stop':                                                                                                      // 45\n      run = false;                                                                                                    // 46\n      break;                                                                                                          // 47\n    case 'delay':                                                                                                     // 48\n      run = false;                                                                                                    // 49\n      if (Herald._serverRunners[medium]) { //will only be called on server, no method needed                          // 50\n        var query = Herald._setProperty('media.' + medium + '.send', true);                                           // 51\n        var command = 'Herald.escalate(\"' + notification._id + '\", \"' + medium + '\")';                                // 52\n        Herald.collection.update(notificationId, { $set: query }, function (err, count) {                             // 53\n          Queue.add({ command: command, execute_after: result.time });                                                // 54\n        });                                                                                                           // 55\n      }                                                                                                               // 56\n      if (Herald._clientRunners[medium]) {                                                                            // 57\n        var delay = result.time.getTime() - new Date().getTime();                                                     // 58\n        Meteor.call('HeraldUpdateAndDelay', notification._id, medium, delay);                                         // 59\n      }                                                                                                               // 60\n      break;                                                                                                          // 61\n    case 'transfer':                                                                                                  // 62\n      run = false;                                                                                                    // 63\n      if (!Herald._clientRunners[result.name] && !Herald._serverRunners[result.name])                                 // 64\n        throw new Error('Herald: '+ medium +' transfer call - no medium '+ result.name);                              // 65\n      if (Herald._serverRunners[result.name])                                                                         // 66\n        Meteor.call('HeraldTransferServerMedium', notification._id, result);                                          // 67\n      if (Herald._clientRunners[result.name]) {                                                                       // 68\n        var delay = result.time && result.time.getTime() - new Date().getTime();                                      // 69\n        var query = Herald._setProperty('media.' + result.name, true);                                                // 70\n        Meteor.call('HeraldUpdateAndDelay', notification._id, query, delay);                                          // 71\n      }                                                                                                               // 72\n      break;                                                                                                          // 73\n    default:                                                                                                          // 74\n      throw new Error('Herald:' + medium + ' onRun returned the unknown command ' + result.command);                  // 75\n  }                                                                                                                   // 76\n  return run;                                                                                                         // 77\n}                                                                                                                     // 78\n                                                                                                                      // 79\nMeteor.methods({                                                                                                      // 80\n  HeraldTransferServerMedium: function (notificationId, result) {                                                     // 81\n    var notification = Herald.collection.findOne(notificationId);                                                     // 82\n    var courier = Herald._getCourier(notification.courier);                                                           // 83\n                                                                                                                      // 84\n    if (this.userId !== notification.userId) throw new Meteor.Error(550, 'Herald: permission denied');                // 85\n    if (courier && !courier.media[result.name])                                                                       // 86\n      throw new Error('Herald: ' + notification.courier + ' transfer call - no medium '+ result.name);                // 87\n                                                                                                                      // 88\n    var command = 'Herald.escalate(\"' + notification._id + '\", \"' + result.name + '\")';                               // 89\n    if (Meteor.isServer) {//simulation causes errors                                                                  // 90\n      var query = Herald._setProperty('media.' + result.name + '.send', true);                                        // 91\n                                                                                                                      // 92\n      Herald.collection.update(notificationId, { $set: query }, function (err, count) {                               // 93\n        if (result.time)                                                                                              // 94\n          if (Package['artwells:queue']) {                                                                            // 95\n            Queue.add({ command: command, execute_after: result.time });                                              // 96\n          } else {                                                                                                    // 97\n            //TODO: how are we going to do delays without a queue?                                                    // 98\n            //Herald.escalate(notification._id, result.name);                                                         // 99\n            throw new Meteor.error('Herald: delay is not available without artwells:queue');                          // 100\n          }                                                                                                           // 101\n        else                                                                                                          // 102\n          if (Package['artwells:queue']) {                                                                            // 103\n            Queue.add({ command: command });                                                                          // 104\n          } else {                                                                                                    // 105\n            Herald.escalate(notification._id, result.name);                                                           // 106\n          }                                                                                                           // 107\n      });                                                                                                             // 108\n    }                                                                                                                 // 109\n  },                                                                                                                  // 110\n  HeraldUpdateAndDelay: function (notificationId, query, delay) {                                                     // 111\n    if (!delay || delay < 1000) delay = 1000; //give at least one second for the dust to settle                       // 112\n    var notification = Herald.collection.findOne(notificationId);                                                     // 113\n    if (this.userId !== notification.userId) throw new Meteor.Error(550, 'Herald: permission denied');                // 114\n    if (!this.isSimulation) {                                                                                         // 115\n      Meteor.setTimeout(function () {                                                                                 // 116\n        Herald.collection.update(notificationId, { $set: query });                                                    // 117\n      }, delay);                                                                                                      // 118\n    }                                                                                                                 // 119\n  }                                                                                                                   // 120\n});                                                                                                                   // 121\n                                                                                                                      // 122\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kestanous:herald/lib/users.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n//userPreference - can be easily overloaded without loss of functionality.                                            // 1\nHerald.userPreference = function (user, medium, courier) { return Herald.getUserPreference(user, medium, courier); }; // 2\n                                                                                                                      // 3\n// set user medium preference                                                                                         // 4\nHerald.setUserPreference = function (user, preference, courier) {                                                     // 5\n  if (courier && !Herald._getCourier(courier)) //optional and check                                                   // 6\n    throw new Error('Herald - getUserPreference: courier \"' + courier + '\" not found')                                // 7\n                                                                                                                      // 8\n  if (!_.isObject(preference)) throw new Error('Herald - getUserPreference: no media preference given');              // 9\n  var badKeys = _.omit(preference, Herald._media());                                                                  // 10\n  if (!_.isEmpty(badKeys)) throw new Error('Herald - getUserPreference: \"' + _.toArray(badKeys) + '\" are not valid media');\n                                                                                                                      // 12\n  user = Herald._getUser.call(this, user);                                                                            // 13\n  if (!user || !user._id) throw new Error('Herald - setUserPreference: user not found');                              // 14\n                                                                                                                      // 15\n  //not set                                                                                                           // 16\n  if (!user.profile) {                                                                                                // 17\n    return Meteor.users.update(user._id, { $set: { profile: newProfileMedia(preference) } });                         // 18\n  }                                                                                                                   // 19\n  if (!user.profile.notifications) {                                                                                  // 20\n    return Meteor.users.update(user._id, { $set: { 'profile.notifications': newProfileMedia(preference).notifications } });\n  }                                                                                                                   // 22\n                                                                                                                      // 23\n  if (!courier) { // generic only                                                                                     // 24\n    var media = user.profile.notifications.media;                                                                     // 25\n    // if media preference is set, merge medium preferences. otherwise, create new preference                         // 26\n    var media = media ? _.extend(media, preference) : newProfileMedia(preference).notifications.media;                // 27\n    return Meteor.users.update(user._id, { $set: { 'profile.notifications.media': media } });                         // 28\n  } // generic only end                                                                                               // 29\n                                                                                                                      // 30\n  var pref = Herald._getCourier(courier, user.profile.notifications.couriers);                                        // 31\n  // if courier is set, merge courier preferences. otherwise use preference                                           // 32\n  var pref = pref ? _.extend(pref, preference) : preference;                                                          // 33\n                                                                                                                      // 34\n  var query = Herald._setProperty('profile.notifications.couriers.' + courier, pref);                                 // 35\n  return Meteor.users.update(user._id, { $set: query });                                                              // 36\n}                                                                                                                     // 37\n                                                                                                                      // 38\n// get user [medium [courier]] preference                                                                             // 39\nHerald.getUserPreference = function (user, medium, courier) {                                                         // 40\n  if (!_.isString(medium)) throw new Error('Herald - getUserPreference: no medium given');                            // 41\n  if (!_.contains(Herald._media(), medium))                                                                           // 42\n    throw new Error('Herald - getUserPreference: medium \"' + medium + '\" not found')                                  // 43\n  if (courier && !Herald._getCourier(courier))                                                                        // 44\n    throw new Error('Herald - getUserPreference: courier \"' + courier + '\" not found')                                // 45\n                                                                                                                      // 46\n  user = Herald._getUser.call(this, user);                                                                            // 47\n  if (!user || !user._id) throw new Error('Herald - getUserPreference: user not found')                               // 48\n                                                                                                                      // 49\n  var defaultOutput = Herald.settings.userPreferenceDefault;                                                          // 50\n                                                                                                                      // 51\n  //not set                                                                                                           // 52\n  if (!user.profile || !user.profile.notifications) return defaultOutput;                                             // 53\n                                                                                                                      // 54\n  return (function (pref, courier) {                                                                                  // 55\n    var courier = courier && Herald._getCourier(courier, pref.couriers);                                              // 56\n                                                                                                                      // 57\n    if (courier && _.has(courier, medium)) {                                                                          // 58\n      return courier[medium];                                                                                         // 59\n    }                                                                                                                 // 60\n    //general                                                                                                         // 61\n    if (pref.media && _.has(pref.media, medium)) {                                                                    // 62\n      return pref.media[medium];                                                                                      // 63\n    }                                                                                                                 // 64\n                                                                                                                      // 65\n    return defaultOutput;                                                                                             // 66\n  })(user.profile.notifications, courier);                                                                            // 67\n}                                                                                                                     // 68\n                                                                                                                      // 69\nvar newProfileMedia = function (preferences) {                                                                        // 70\n  return {                                                                                                            // 71\n    notifications: {                                                                                                  // 72\n      media: preferences,                                                                                             // 73\n      couriers: {}                                                                                                    // 74\n    }                                                                                                                 // 75\n  };                                                                                                                  // 76\n};                                                                                                                    // 77\n                                                                                                                      // 78\nvar newProfileCouriers = function (courier, preferences) {                                                            // 79\n  return {                                                                                                            // 80\n    notifications: {                                                                                                  // 81\n      media: {},                                                                                                      // 82\n      couriers: Herald._setProperty(courier, preferences)                                                             // 83\n    }                                                                                                                 // 84\n  };                                                                                                                  // 85\n};                                                                                                                    // 86\n                                                                                                                      // 87\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kestanous:herald/lib/onsite.js                                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar runner = {                                                                                                        // 1\n  name: 'onsite',                                                                                                     // 2\n  where: ['client']                                                                                                   // 3\n};                                                                                                                    // 4\nrunner.run = function (notification, user) {};                                                                        // 5\nrunner.check = function () {};                                                                                        // 6\nHerald.addRunner(runner);                                                                                             // 7\n                                                                                                                      // 8\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kestanous:herald/lib/helpers.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n//get notifications by user, [courier, [[medium]]                                                                     // 1\nHerald.getNotifications = function (query, options) {                                                                 // 2\n  // break function if not finished with logging in                                                                   // 3\n  if (Meteor.isClient && Meteor.loggingIn()) {                                                                        // 4\n    return [];                                                                                                        // 5\n  }                                                                                                                   // 6\n                                                                                                                      // 7\n  if (!_.isObject(query)) {                                                                                           // 8\n    throw new Meteor.Error('Herald getNotifications must contain Mongo filter query');                                // 9\n  }                                                                                                                   // 10\n                                                                                                                      // 11\n  var badKeys = _.omit(query, ['user', 'courier', 'medium', 'read']);                                                 // 12\n  if (!_.isEmpty(badKeys)) {                                                                                          // 13\n    throw new Error('Herald - getNotifications: unknown key(s) ' + _.toArray(badKeys))                                // 14\n  }                                                                                                                   // 15\n                                                                                                                      // 16\n  var userId = query.user,                                                                                            // 17\n    courier = query.courier,                                                                                          // 18\n    medium = query.medium,                                                                                            // 19\n    read = query.read || false;                                                                                       // 20\n                                                                                                                      // 21\n  // get user                                                                                                         // 22\n  var user = Herald._getUser.call(this, userId);                                                                      // 23\n                                                                                                                      // 24\n  // check if user exists                                                                                             // 25\n  if (!user || !user._id) {                                                                                           // 26\n    throw new Error('Herald - getNotifications: user not found');                                                     // 27\n  }                                                                                                                   // 28\n                                                                                                                      // 29\n  // check courier                                                                                                    // 30\n  if (courier && !Herald._getCourier(courier)) {                                                                      // 31\n    throw new Error('Herald - getNotifications: courier \"' + courier + '\" not found');                                // 32\n  }                                                                                                                   // 33\n                                                                                                                      // 34\n  // check medium                                                                                                     // 35\n  if (medium && !_.contains(Herald._media(), medium)) {                                                               // 36\n    throw new Error('Herald - getNotifications: medium \"' + medium + '\" not found');                                  // 37\n  }                                                                                                                   // 38\n                                                                                                                      // 39\n  var query = { userId: user._id, read: read };                                                                       // 40\n  if (medium) {                                                                                                       // 41\n    query['media.' + medium] = { $exists: true };                                                                     // 42\n  }                                                                                                                   // 43\n  if (courier) {                                                                                                      // 44\n    query['courier'] = courier;                                                                                       // 45\n  }                                                                                                                   // 46\n                                                                                                                      // 47\n  return Herald.collection.find(query, options);                                                                      // 48\n};                                                                                                                    // 49\n                                                                                                                      // 50\n//literally mark-All-As-Read, cheers :)                                                                               // 51\nMeteor.methods({                                                                                                      // 52\n  heraldMarkAllAsRead: function () {                                                                                  // 53\n    Herald.collection.update({ userId: this.userId }, {                                                               // 54\n      $set: { read: true }                                                                                            // 55\n    }, { multi: true });                                                                                              // 56\n  }                                                                                                                   // 57\n});                                                                                                                   // 58\n                                                                                                                      // 59\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kestanous:herald/server/createNotification.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n//You can insert manually but this should save you some work.                                                         // 1\nHerald.createNotification = function (userIds, params) {                                                              // 2\n  check(userIds, Match.OneOf([String], String)); //TODO: better Collection ID check                                   // 3\n  check(params, Object);                                                                                              // 4\n                                                                                                                      // 5\n  var courier = Herald._getCourier(params.courier);                                                                   // 6\n  if (!courier) {                                                                                                     // 7\n    throw new Error('Notification: courier type does not exists');                                                    // 8\n  }                                                                                                                   // 9\n                                                                                                                      // 10\n  // always assume multiple users.                                                                                    // 11\n  if (_.isString(userIds)) userIds = [userIds];                                                                       // 12\n  var users = Meteor.users.find({ _id: { $in: userIds } }, { fields: { profile: 1 } });                               // 13\n                                                                                                                      // 14\n  users.forEach(function (user) { //create a notification for each user                                               // 15\n                                                                                                                      // 16\n    //When creating a new notification                                                                                // 17\n    //                                                                                                                // 18\n    // timestamp - you should timestamp every doc                                                                     // 19\n    // userId - there must be a user to notify                                                                        // 20\n    // courier - this is the courier                                                                                  // 21\n    // data - in database metadata, consider renaming                                                                 // 22\n    // read - default false, consider auto-delete?                                                                    // 23\n    // escalated - track if higher level notifications have run                                                       // 24\n    // url - allow of iron:router magic. set read to true if visited (see routeSeenByUser)                            // 25\n    // media - a list of all the media the notification can be sent on but has not been.                              // 26\n                                                                                                                      // 27\n    var notification = {                                                                                              // 28\n      timestamp: new Date(),                                                                                          // 29\n      userId: user._id,                                                                                               // 30\n      courier: params.courier,                                                                                        // 31\n      data: params.data,                                                                                              // 32\n      read: false,                                                                                                    // 33\n      escalated: false,                                                                                               // 34\n      url: params.url,                                                                                                // 35\n      media: {}                                                                                                       // 36\n    };                                                                                                                // 37\n                                                                                                                      // 38\n    //check if this notification should be sent to medium                                                             // 39\n    _.each(_.keys(courier.media), function (medium) {                                                                 // 40\n      var fallback = courier.media[medium].fallback;                                                                  // 41\n      var preference = Herald.userPreference(user, medium, notification.courier);                                     // 42\n                                                                                                                      // 43\n      // run if not a fallback and preference allows it                                                               // 44\n      notification.media[medium] = { send: !fallback && preference, sent: false };                                    // 45\n    });                                                                                                               // 46\n                                                                                                                      // 47\n    //create notification and return its id                                                                           // 48\n    var notificationId = Herald.collection.insert(notification);                                                      // 49\n                                                                                                                      // 50\n    //if no notificationId then insert failed anD PANIC, STOP, DON'T ACUTALLY DO THIS!                                // 51\n    if (notificationId) {                                                                                             // 52\n      notification._id = notificationId;                                                                              // 53\n      Herald.SetupEscalations(notification);                                                                          // 54\n    }                                                                                                                 // 55\n                                                                                                                      // 56\n    return notificationId;                                                                                            // 57\n  });                                                                                                                 // 58\n};                                                                                                                    // 59\n                                                                                                                      // 60\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kestanous:herald/server/escalate.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n//allow package users to delay escalations                                                                            // 1\nMeteor.startup(function () {                                                                                          // 2\n  //if no pattern is defined then skip this.                                                                          // 3\n  // if (!Herald.settings.delayEscalation) return false;                                                              // 4\n  if (Package['artwells:queue']) {                                                                                    // 5\n    Meteor.setInterval(function ( ){ Queue.run() }, Herald.settings.queueTimer); // by default, once a minute         // 6\n  }                                                                                                                   // 7\n});                                                                                                                   // 8\n                                                                                                                      // 9\n                                                                                                                      // 10\nHerald.SetupEscalations = function (notification) {                                                                   // 11\n  if (notification.escalated) return false; //don't resend notifications                                              // 12\n                                                                                                                      // 13\n  _.each(_.keys(Herald._getCourier(notification.courier).media), function (medium) {                                  // 14\n    if (!_.contains(_.keys(Herald._serverRunners), medium)) return; //Server only                                     // 15\n    if (!notification.media[medium].send || notification.media[medium].sent) return; //already sent/don't send        // 16\n    if (Package['artwells:queue']) {                                                                                  // 17\n      var command = 'Meteor.call(\"heraldEscalate\",\"' + notification._id + '\", \"' + medium + '\")';                     // 18\n      Queue.add({ command: command });                                                                                // 19\n    } else {                                                                                                          // 20\n      Meteor.call(\"heraldEscalate\", notification._id, medium);                                                        // 21\n    }                                                                                                                 // 22\n  });                                                                                                                 // 23\n                                                                                                                      // 24\n  Herald.collection.update(notification._id, { $set: { escalated: true } } );                                         // 25\n}                                                                                                                     // 26\n                                                                                                                      // 27\nMeteor.methods({                                                                                                      // 28\n  /**                                                                                                                 // 29\n   * Server method to call Herald.escalate out of the queue package                                                   // 30\n   *                                                                                                                  // 31\n   * @param {string} notificationId                                                                                   // 32\n   * @param {string} medium                                                                                           // 33\n   */                                                                                                                 // 34\n  heraldEscalate: function (notificationId, medium) {                                                                 // 35\n    try {                                                                                                             // 36\n      Herald.escalate(notificationId, medium);                                                                        // 37\n    } catch (e) {                                                                                                     // 38\n      throw new Meteor.Error(\"Can't start Herald.escalate: \" + e);                                                    // 39\n    }                                                                                                                 // 40\n  }                                                                                                                   // 41\n});                                                                                                                   // 42\n                                                                                                                      // 43\n                                                                                                                      // 44\nHerald.escalate = function (notificationId, medium) {                                                                 // 45\n  var notification = Herald.collection.findOne(notificationId);                                                       // 46\n  if (!notification) return; //notification has been removed                                                          // 47\n  if (notification.read) return; //don't escalate a read notification!                                                // 48\n  if (!notification.media[medium].send || notification.media[medium].sent) return; //already sent/don't send          // 49\n  if (Herald.settings.overrides[medium]) return; //disabled by override                                               // 50\n                                                                                                                      // 51\n  var user = Meteor.users.findOne(notification.userId);                                                               // 52\n  if (!user) return; //user has been removed                                                                          // 53\n                                                                                                                      // 54\n  var run = true; //does the user want you to send on this medium?                                                    // 55\n  if (!Herald.userPreference(user, medium, notification.courier)) run = false;                                        // 56\n                                                                                                                      // 57\n  var courier = Herald._getCourier(notification.courier);                                                             // 58\n  var courierMedium = courier && courier.media[medium];                                                               // 59\n  var thisOnRun = courierMedium && courierMedium.onRun;                                                               // 60\n                                                                                                                      // 61\n  if (_.isFunction(thisOnRun)) {                                                                                      // 62\n    var result = thisOnRun.call(new onRun(), notification, user, run);                                                // 63\n    if (!result.command) throw new Error('Herald:' + medium + ' onRun did not return a command');                     // 64\n    run = onRunResolve(notification, medium, result, run);                                                            // 65\n  }                                                                                                                   // 66\n                                                                                                                      // 67\n  if (run) {                                                                                                          // 68\n    Herald._serverRunners[medium].call(courierMedium, notification, user);                                            // 69\n    var query = Herald._setProperty('media.' + medium, { send: false, sent: true });                                  // 70\n  } else {                                                                                                            // 71\n    var query = Herald._setProperty('media.' + medium + '.send', false);                                              // 72\n  }                                                                                                                   // 73\n                                                                                                                      // 74\n  Herald.collection.update(notification._id, { $set: query } );                                                       // 75\n};                                                                                                                    // 76\n                                                                                                                      // 77\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kestanous:herald/server/publish.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// only publish notifications belonging to the current user                                                           // 1\nMeteor.publish('notifications', function () {                                                                         // 2\n  var media = _.keys(Herald._clientRunners).map(function (key) {                                                      // 3\n    return Herald._setProperty('media.' + key, { send: true, sent: false });                                          // 4\n  });                                                                                                                 // 5\n  return Herald.collection.find({ userId: this.userId, $or: media });                                                 // 6\n});                                                                                                                   // 7\n                                                                                                                      // 8\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}