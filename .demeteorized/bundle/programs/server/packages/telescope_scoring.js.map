{"version":3,"sources":["meteor://ðŸ’»app/lib/scoring.js","meteor://ðŸ’»app/lib/server/cron.js"],"names":[],"mappings":"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","file":"/packages/telescope_scoring.js","sourcesContent":["Telescope.updateScore = function (args) {\n  var collection = args.collection;\n  var item = args.item;\n  var forceUpdate = args.forceUpdate;\n\n  // console.log(item)\n\n  // Status Check\n\n  if (!!item.status && item.status !== 2) // if item has a status and is not approved, don't update its score\n    return 0;\n\n  // Age Check\n\n  // If for some reason item doesn't have a \"postedAt\" property, abort\n  if (!item.postedAt)\n    return 0;\n\n  var postedAt = item.postedAt.valueOf();\n  var now = new Date().getTime();\n  var age = now - postedAt;\n  var ageInHours = age / (60 * 60 * 1000);\n\n  if (postedAt > now) // if post has been scheduled in the future, don't update its score\n    return 0;\n\n  // For performance reasons, the database is only updated if the difference between the old score and the new score\n  // is meaningful enough. To find out, we calculate the \"power\" of a single vote after n days.\n  // We assume that after n days, a single vote will not be powerful enough to affect posts' ranking order.\n  // Note: sites whose posts regularly get a lot of votes can afford to use a lower n.\n\n  // n =  number of days after which a single vote will not have a big enough effect to trigger a score update\n  //      and posts can become inactive\n  var n = 30;\n  // x = score increase amount of a single vote after n days (for n=100, x=0.000040295)\n  var x = 1/Math.pow(n*24+2,1.3);\n  // time decay factor\n  var f = 1.3;\n\n  // use baseScore if defined, if not just use the number of votes\n  // note: for transition period, also use votes if there are more votes than baseScore\n  // var baseScore = Math.max(item.votes || 0, item.baseScore || 0);\n  var baseScore = item.baseScore;\n\n  // HN algorithm\n  var newScore = baseScore / Math.pow(ageInHours + 2, f);\n\n  // console.log(now)\n  // console.log(age)\n  // console.log(ageInHours)\n  // console.log(baseScore)\n  // console.log(newScore)\n\n  // Note: before the first time updateScore runs on a new item, its score will be at 0\n  var scoreDiff = Math.abs(item.score - newScore);\n\n  // only update database if difference is larger than x to avoid unnecessary updates\n  if (forceUpdate || scoreDiff > x){\n    collection.update(item._id, {$set: {score: newScore, inactive: false}});\n    return 1;\n  }else if(ageInHours > n*24){\n    // only set a post as inactive if it's older than n days\n    collection.update(item._id, {$set: {inactive: true}});\n  }\n  return 0;\n};\n","Meteor.startup(function () {\n  var scoreInterval = Settings.get(\"scoreUpdateInterval\") || 30;\n  if (scoreInterval > 0) {\n\n    // active items get updated every N seconds\n    Meteor.setInterval(function () {\n      var updatedPosts = 0;\n      var updatedComments = 0;\n      // console.log('tick ('+scoreInterval+')');\n      Posts.find({'status': 2,'inactive': {$ne : true}}).forEach(function (post) { // only run scoring on approved posts\n        updatedPosts += Telescope.updateScore({collection: Posts, item: post});\n      });\n      Comments.find({'inactive': {$ne : true}}).forEach(function (comment) {\n        updatedComments += Telescope.updateScore({collection: Comments, item: comment});\n      });\n      // console.log(\"Updated \"+updatedPosts+\"/\"+Posts.find().count()+\" Posts\")\n      // console.log(\"Updated \"+updatedComments+\"/\"+Comments.find().count()+\" Comments\")\n    }, scoreInterval * 1000);\n\n    // inactive items get updated every hour\n    Meteor.setInterval(function () {\n      var updatedPosts = 0;\n      var updatedComments = 0;\n      Posts.find({'inactive': true}).forEach(function (post) {\n        updatedPosts += Telescope.updateScore({collection: Posts, item: post});\n      });\n      Comments.find({'inactive': true}).forEach(function (comment) {\n        updatedComments += Telescope.updateScore({collection: Comments, item: comment});\n      });\n    }, 3600 * 1000);\n\n  }\n});\n"]}