{"version":3,"sources":["meteor://ðŸ’»app/packages/aldeed_http/packages/aldeed_http.js"],"names":[],"mappingsgG","file":"/packages/aldeed_http.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n// packages/aldeed:http/http-extras-common.js                                      //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n                                                                                   //\nmakeErrorByStatus = function(statusCode, content) {                                // 1\n  var MAX_LENGTH = 500; // if you change this, also change the appropriate test    // 2\n                                                                                   // 3\n  var truncate = function(str, length) {                                           // 4\n    return str.length > length ? str.slice(0, length) + '...' : str;               // 5\n  };                                                                               // 6\n                                                                                   // 7\n  var message = \"failed [\" + statusCode + \"]\";                                     // 8\n  if (content) {                                                                   // 9\n    try {                                                                          // 10\n      message += \" \" + truncate(content.replace(/\\n/g, \" \"), MAX_LENGTH);          // 11\n    }                                                                              // 12\n    catch (error) {                                                                // 13\n      message += \" Response is not of type String \";                               // 14\n    }                                                                              // 15\n  }                                                                                // 16\n                                                                                   // 17\n  return new Error(message);                                                       // 18\n};                                                                                 // 19\n                                                                                   // 20\nencodeParams = function(params) {                                                  // 21\n  var buf = [];                                                                    // 22\n  _.each(params, function(value, key) {                                            // 23\n    if (buf.length)                                                                // 24\n      buf.push('&');                                                               // 25\n    buf.push(encodeString(key), '=', encodeString(value));                         // 26\n  });                                                                              // 27\n  return buf.join('').replace(/%20/g, '+');                                        // 28\n};                                                                                 // 29\n                                                                                   // 30\nencodeString = function(str) {                                                     // 31\n  return encodeURIComponent(str).replace(/[!'()]/g, escape).replace(/\\*/g, \"%2A\"); // 32\n};                                                                                 // 33\n                                                                                   // 34\nbuildUrl = function(before_qmark, from_qmark, opt_query, opt_params) {             // 35\n  var url_without_query = before_qmark;                                            // 36\n  var query = from_qmark ? from_qmark.slice(1) : null;                             // 37\n                                                                                   // 38\n  if (typeof opt_query === \"string\")                                               // 39\n    query = String(opt_query);                                                     // 40\n                                                                                   // 41\n  if (opt_params) {                                                                // 42\n    query = query || \"\";                                                           // 43\n    var prms = encodeParams(opt_params);                                           // 44\n    if (query && prms)                                                             // 45\n      query += '&';                                                                // 46\n    query += prms;                                                                 // 47\n  }                                                                                // 48\n                                                                                   // 49\n  var url = url_without_query;                                                     // 50\n  if (query !== null)                                                              // 51\n    url += (\"?\"+query);                                                            // 52\n                                                                                   // 53\n  return url;                                                                      // 54\n};                                                                                 // 55\n                                                                                   // 56\n// Fill in `response.data` if the content-type is JSON.                            // 57\npopulateData = function(response) {                                                // 58\n  // Read Content-Type header, up to a ';' if there is one.                        // 59\n  // A typical header might be \"application/json; charset=utf-8\"                   // 60\n  // or just \"application/json\".                                                   // 61\n  var contentType = (response.headers['content-type'] || ';').split(';')[0];       // 62\n                                                                                   // 63\n  // Only try to parse data as JSON if server sets correct content type.           // 64\n  if (_.include(['application/json', 'text/javascript'], contentType)) {           // 65\n    try {                                                                          // 66\n      response.data = JSON.parse(response.content);                                // 67\n    } catch (err) {                                                                // 68\n      response.data = null;                                                        // 69\n    }                                                                              // 70\n  } else {                                                                         // 71\n    response.data = null;                                                          // 72\n  }                                                                                // 73\n};                                                                                 // 74\n                                                                                   // 75\n/////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n// packages/aldeed:http/http-extras-server.js                                      //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n                                                                                   //\nvar request = Npm.require('request');                                              // 1\nvar url_util = Npm.require('url');                                                 // 2\n                                                                                   // 3\n// _call always runs asynchronously; HTTP.call, defined below,                     // 4\n// wraps _call and runs synchronously when no callback is provided.                // 5\nvar _call = function(method, url, options, callback) {                             // 6\n                                                                                   // 7\n  ////////// Process arguments //////////                                          // 8\n                                                                                   // 9\n  if (! callback && typeof options === \"function\") {                               // 10\n    // support (method, url, callback) argument list                               // 11\n    callback = options;                                                            // 12\n    options = null;                                                                // 13\n  }                                                                                // 14\n                                                                                   // 15\n  options = options || {};                                                         // 16\n                                                                                   // 17\n  method = (method || \"\").toUpperCase();                                           // 18\n                                                                                   // 19\n  if (! /^https?:\\/\\//.test(url))                                                  // 20\n    throw new Error(\"url must be absolute and start with http:// or https://\");    // 21\n                                                                                   // 22\n  var url_parts = url_util.parse(url);                                             // 23\n                                                                                   // 24\n  var headers = {};                                                                // 25\n                                                                                   // 26\n  var content = options.content;                                                   // 27\n  if (options.data) {                                                              // 28\n    content = JSON.stringify(options.data);                                        // 29\n    headers['Content-Type'] = 'application/json';                                  // 30\n  }                                                                                // 31\n                                                                                   // 32\n  var responseType = options.responseType || \"string\";                             // 33\n  var encoding = _.isUndefined(options._encoding) ? \"utf8\" : options._encoding;    // 34\n                                                                                   // 35\n  // If responseType requires getting a Buffer back, override encoding             // 36\n  // to null, which tells request to return a Buffer                               // 37\n  if (_.contains([\"arraybuffer\", \"buffer\", \"ejson-binary\"], responseType)) {       // 38\n    encoding = null;                                                               // 39\n  }                                                                                // 40\n                                                                                   // 41\n  var params_for_url, params_for_body;                                             // 42\n  if (content || method === \"GET\" || method === \"HEAD\")                            // 43\n    params_for_url = options.params;                                               // 44\n  else                                                                             // 45\n    params_for_body = options.params;                                              // 46\n                                                                                   // 47\n  var new_url = buildUrl(                                                          // 48\n    url_parts.protocol + \"//\" + url_parts.host + url_parts.pathname,               // 49\n    url_parts.search, options.query, params_for_url);                              // 50\n                                                                                   // 51\n  if (options.auth) {                                                              // 52\n    if (options.auth.indexOf(':') < 0)                                             // 53\n      throw new Error('auth option should be of the form \"username:password\"');    // 54\n    headers['Authorization'] = \"Basic \"+                                           // 55\n      (new Buffer(options.auth, \"ascii\")).toString(\"base64\");                      // 56\n  }                                                                                // 57\n                                                                                   // 58\n  if (params_for_body) {                                                           // 59\n    content = encodeParams(params_for_body);                                       // 60\n    headers['Content-Type'] = \"application/x-www-form-urlencoded\";                 // 61\n  }                                                                                // 62\n                                                                                   // 63\n  _.extend(headers, options.headers || {});                                        // 64\n                                                                                   // 65\n  // wrap callback to add a 'response' property on an error, in case               // 66\n  // we have both (http 4xx/5xx error, which has a response payload)               // 67\n  callback = (function(callback) {                                                 // 68\n    return function(error, response) {                                             // 69\n      if (error && response)                                                       // 70\n        error.response = response;                                                 // 71\n      callback(error, response);                                                   // 72\n    };                                                                             // 73\n  })(callback);                                                                    // 74\n                                                                                   // 75\n  // safety belt: only call the callback once.                                     // 76\n  callback = _.once(callback);                                                     // 77\n                                                                                   // 78\n                                                                                   // 79\n  ////////// Kickoff! //////////                                                   // 80\n                                                                                   // 81\n  var req_options = {                                                              // 82\n    url: new_url,                                                                  // 83\n    method: method,                                                                // 84\n    encoding: encoding,                                                            // 85\n    jar: false,                                                                    // 86\n    timeout: options.timeout,                                                      // 87\n    body: content,                                                                 // 88\n    followRedirect: options.followRedirects,                                       // 89\n    headers: headers                                                               // 90\n  };                                                                               // 91\n                                                                                   // 92\n  request(req_options, function(error, res, body) {                                // 93\n    var response = null;                                                           // 94\n                                                                                   // 95\n    if (! error) {                                                                 // 96\n                                                                                   // 97\n      response = {};                                                               // 98\n      response.statusCode = res.statusCode;                                        // 99\n                                                                                   // 100\n      // Convert body into requested type                                          // 101\n      switch (responseType) {                                                      // 102\n        case \"arraybuffer\":                                                        // 103\n          var len = body.length;                                                   // 104\n          var ab = new ArrayBuffer(len);                                           // 105\n          var view = new Uint8Array(ab);                                           // 106\n          for (var i = 0; i < len; i++) {                                          // 107\n            view[i] = body[i];                                                     // 108\n          }                                                                        // 109\n          body = ab;                                                               // 110\n          break;                                                                   // 111\n        case \"ejson-binary\":                                                       // 112\n          var len = body.length;                                                   // 113\n          var binary = EJSON.newBinary(len);                                       // 114\n          for (var i = 0; i < len; i++) {                                          // 115\n            binary[i] = body[i];                                                   // 116\n          }                                                                        // 117\n          body = binary;                                                           // 118\n          break;                                                                   // 119\n        case \"json\":                                                               // 120\n          if (typeof body === \"string\") {                                          // 121\n            try {                                                                  // 122\n              body = JSON.parse(body);                                             // 123\n            } catch (err) {                                                        // 124\n              // leave it as a string                                              // 125\n            }                                                                      // 126\n          }                                                                        // 127\n          break;                                                                   // 128\n      }                                                                            // 129\n                                                                                   // 130\n                                                                                   // 131\n      response.content = body;                                                     // 132\n      response.headers = res.headers;                                              // 133\n                                                                                   // 134\n      populateData(response);                                                      // 135\n                                                                                   // 136\n      if (response.statusCode >= 400)                                              // 137\n        error = makeErrorByStatus(response.statusCode, response.content);          // 138\n    }                                                                              // 139\n                                                                                   // 140\n    callback(error, response);                                                     // 141\n                                                                                   // 142\n  });                                                                              // 143\n};                                                                                 // 144\n                                                                                   // 145\nHTTP.call = Meteor.wrapAsync(_call);                                               // 146\n                                                                                   // 147\n                                                                                   // 148\n/////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}